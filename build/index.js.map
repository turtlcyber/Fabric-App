{"version":3,"file":"index.js","mappings":"2BAAe,EAAQ,KAEhBA,SAEPC,EAAOC,QAAU,CACbC,WAAYC,QAAQC,IAAIC,aACxBC,SAAUH,QAAQC,IAAIG,WACtBC,eAAgBL,QAAQC,IAAIK,WAC5BC,KAAMP,QAAQC,IAAIO,KAClBC,eAAgBT,QAAQC,IAAIS,iB,gBCThC,MAAMC,EAAW,EAAQ,KACnB,WAAEZ,GAAe,EAAQ,KAW/BF,EAAOC,QAAU,CAAEc,YATnB,WACI,IACID,EAASE,QAAQd,EACrB,CAAE,MAAOe,GAEL,OADAC,QAAQC,IAAI,iCACLF,CACX,CACJ,E,gBCVA,MAAMG,EAAa,EAAQ,KACrBC,EAAM,EAAQ,KACdC,EAAS,EAAQ,KACjBC,EAAO,EAAQ,KACfC,EAAO,EAAQ,MACf,oBAAEC,EAAmB,6BAAEC,GAAiC,EAAQ,KAChE,KAAEhB,EAAI,eAAEF,GAAmB,EAAQ,KACnCmB,EAAY,EAAQ,KAmX1B3B,EAAOC,QAAU,CACb2B,YAjXgBC,MAAOC,EAAKC,KAC5B,IACI,IAAI,KAAEC,EAAI,MAAEC,EAAK,SAAEC,EAAQ,OAAEC,GAAWL,EAAIM,KAE5C,KAAKJ,GAASC,GAAUC,GAAaC,GACjC,OAAOJ,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAI,WAAEC,GAAeV,EAAIW,MAEzB,IAAKD,EACD,OAAOT,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAI1DL,QAD2BZ,EAAOoB,KAAKR,EAAU,IAGjD,IAAIS,EAAmBlB,IACnBmB,EAAiB,gBACjBC,EAAiBtB,EAAKuB,KAAO,IAAMN,EAAWR,KAAKe,MAAM,KAAKC,MAC9DC,EAAqB,UAAUN,KAAoBjC,IAAOkC,IAE1DM,EAAgB1B,EAAK2B,KAAKC,UAAW,KAAM,KAAM,cAAeP,GAEpEL,EAAWa,GAAGH,GAAgBI,IACtBA,GACApC,QAAQC,IAAImC,EAChB,IAGJC,OAAS,CACLC,QAASX,EACTY,QAASR,GAGb,IAAIS,EAAW,CACXC,QAASjC,EAA6B,IACtCkC,aAAclC,EAA6B,IAC3CM,OACAC,QACAC,WACAC,SACAK,WAAYe,QAGZM,QAAiBzC,EAAW0C,OAAOJ,GAEvC,OAAO3B,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,gBACTwB,KAAMF,GAEd,CAAE,MAAO5C,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA4TAyB,WAvTenC,MAAOC,EAAKC,KAC3B,IACI,IAAI,MAAEE,EAAK,SAAEC,GAAaJ,EAAIM,KAE9B,IAAKH,IAAUC,EACX,OAAOH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oCAG1D,IAAI0B,QAAc7C,EAAW8C,QAAQ,CAAEjC,UACvC,IAAKgC,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,kBAG1DjB,EAAO6C,QAAQjC,EAAU+B,EAAM/B,UAAU,SAAUoB,EAAKc,GACpD,GAAId,EACA,MAAMA,GAKdzB,eAAyBuC,GACrB,GAAIA,EAAQ,CACR,IAAIL,EAAO,CAAC,EACRM,EAAOC,KAAKC,MACZC,EAAYC,KAAKC,MAAML,EAAO,KAC9BM,EAAQtD,EAAIuD,KACZ,CACI3C,MAAOgC,EAAMhC,MACb0B,QAASM,EAAMY,IAAIC,WACnBC,IAAKP,GAEThE,EACA,CAAEwE,UAAW,QAWjB,OATCjB,EAAKc,IAAMZ,EAAMY,IAAIC,WAAcf,EAAK9B,MAAQA,EACjD8B,EAAKY,MAAQA,EAEb5C,EAAIkD,UAAU,gBAAiB,SAAUN,GAEzCV,EAAML,aAAelC,EAA6B,UAE5CuC,EAAMiB,OAELnD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,qBACTwB,KAAMA,GAEd,CACWhC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,gBAE9D,CAlCI4C,CAAUf,EACd,GAkCJ,CAAE,MAAOnD,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAkQA6C,qBA9PyBvD,MAAOC,EAAKC,KACrC,IACI,MAAM,QAAE4B,EAAO,aAAEC,EAAY,OAAEyB,GAAWvD,EAAIwD,OAE9C,IAAK3B,IAAYC,EACb,OAAO7B,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAI0B,QAAc7C,EAAW8C,QAAQ,CAAEP,UAASC,iBAEhD,IAAKK,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,kBAG1D,GAAI0B,EAAMN,UAAYA,GAAWM,EAAML,eAAiBA,EAAc,CAGlE,UAFiBjC,EAAUuC,QAAQ,CAAEmB,WAGjC,OAAOtD,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAG1D,IAAIgD,QAAwBC,aAAaC,KAAK,CAAEJ,WAEhD,OAAOtD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMwB,GAEd,CACI,OAAOxD,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAE9D,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA8NAmD,kBA1NsB7D,MAAOC,EAAKC,KAClC,IACI,MAAM,QAAE4B,EAAO,aAAEC,GAAiB9B,EAAIwD,OAEtC,IAAK3B,IAAYC,EACb,OAAO7B,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAI0B,QAAc7C,EAAW8C,QAAQ,CAAEP,UAASC,iBAEhD,IAAKK,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,kBAG1D,GAAI0B,EAAMN,UAAYA,GAAWM,EAAML,eAAiBA,EAAc,CAClE,IAAIS,EACJ,GAAIvC,EAAIwD,OAAOjB,KACXA,EAAOvC,EAAIwD,OAAOjB,SACf,CACH,IAAIsB,EAAQ,IAAIrB,KAChB,MAAMsB,EAAOD,EAAME,cAInBxB,EAAO,GAAGuB,KAHIE,OAAOH,EAAMI,WAAa,GAAGC,SAAS,EAAG,QAC3CF,OAAOH,EAAMM,WAAWD,SAAS,EAAG,MAGpD,CAEA,IAAIE,QAAuBV,aAAaC,KAAK,CAAEU,YAAa9B,IAExD+B,EAAa,EACjB,IAAK,IAAIC,KAAWH,EAChBE,GAAcC,EAAQC,YAG1B,IAAIvC,EAAO,CACPwC,cAAeL,EACfM,cAAeJ,GAGnB,OAAOrE,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMA,GAEd,CACI,OAAOhC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAE9D,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA0KAkE,mBAtKuB5E,MAAOC,EAAKC,KACnC,IACI,IAAI,QAAE4B,EAAO,aAAEC,GAAiB9B,EAAIwD,OAEpC,IAAK3B,IAAYC,EACb,OAAO7B,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAI0B,QAAc7C,EAAW8C,QAAQ,CAAEP,UAASC,iBAChD,IAAKK,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,kBAG1D,GAAI0B,EAAMN,UAAYA,GAAWM,EAAML,eAAiBA,EAAc,CAClE,IAAI8C,EACAC,EAEJ,GAAI7E,EAAIwD,OAAOoB,WAAa5E,EAAIwD,OAAOqB,QACnCD,EAAY5E,EAAIwD,OAAOoB,UACvBC,EAAU7E,EAAIwD,OAAOqB,YAClB,CACH,MAAMtC,EAAO,IAAIC,KACXsB,EAAOvB,EAAKwB,cAIlBc,EAAU,GAAGf,KAHCE,OAAOzB,EAAK0B,WAAa,GAAGC,SAAS,EAAG,QAC1CF,OAAOzB,EAAK4B,WAAWD,SAAS,EAAG,OAI/C,MAAMY,EAAa,IAAItC,KAAKD,EAAKwC,UAAY,QACvCC,EAAYF,EAAWf,cAI7Ba,EAAY,GAAGI,KAHIhB,OAAOc,EAAWb,WAAa,GAAGC,SAAS,EAAG,QAChDF,OAAOc,EAAWX,WAAWD,SAAS,EAAG,MAG9D,CAEA,IAAIe,QAAwBvB,aAAaC,KAAK,CAC1CU,YAAa,CAAEa,KAAMN,EAAWO,KAAMN,KAGtCP,EAAa,EACjB,GAAIW,EAAgBG,OAChB,IAAK,IAAIb,KAAWU,EAChBX,GAAcC,EAAQC,YAI9B,IAAIvC,EAAO,CACPgD,gBAAiBA,EACjBX,WAAYA,GAGhB,OAAOrE,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMA,GAEd,CACI,OAAOhC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAE9D,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EAyGD4E,oBArGwBtF,MAAOC,EAAKC,KACpC,IACI,MAAM,QAAE4B,EAAO,aAAEC,EAAY,MAAEwD,EAAK,KAAExB,GAAS9D,EAAIwD,OAEnD,KAAK3B,GAAYC,GAAiBwD,GAAUxB,GACxC,OAAO7D,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAI0B,QAAc7C,EAAW8C,QAAQ,CAAEP,UAASC,iBAEhD,IAAKK,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,kBAG1D,GAAI0B,EAAMN,UAAYA,GAAWM,EAAML,eAAiBA,EAAc,CAClE,MAAM8C,EAAY,GAAGd,KAAQwB,OACvBT,EAAU,GAAGf,KAAQwB,OAErBC,QAAyB7B,aAAaC,KAAK,CAC7C6B,UAAW,CAAEN,KAAMN,EAAWO,KAAMN,KAGxC,IAAIP,EAAa,EAEjB,GAAIiB,EAAiBH,OACjB,IAAK,IAAIb,KAAWgB,EAChBjB,GAAcC,EAAQC,YAI9B,IAAIvC,EAAO,CACPsD,iBAAkBA,EAClBE,gBAAiBnB,GAGrB,OAAOrE,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMA,GAEd,CACI,OAAOhC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAE9D,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EAyDDiF,mBArDuB3F,MAAOC,EAAKC,KACnC,IACI,MAAM,QAAE4B,EAAO,aAAEC,EAAY,KAAEgC,GAAS9D,EAAIwD,OAC5C,IAAK3B,IAAYC,IAAiBgC,EAC9B,OAAO7D,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAI0B,QAAc7C,EAAW8C,QAAQ,CAAEP,UAASC,iBAEhD,IAAKK,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,kBAG1D,GAAI0B,EAAMN,UAAYA,GAAWM,EAAML,eAAiBA,EAAc,CAClE,MAAM8C,EAAY,GAAGd,UACfe,EAAU,GAAGf,UAEnB,IAAI6B,QAAwBjC,aAAaC,KAAK,CAC1C6B,UAAW,CAAEN,KAAMN,EAAWO,KAAMN,KAGpCP,EAAa,EACjB,GAAIqB,EAAgBP,OAChB,IAAK,IAAIb,KAAWoB,EAChBrB,GAAcC,EAAQC,YAI9B,IAAIvC,EAAO,CACP2D,gBAAiBD,EACjBE,eAAgBvB,GAGpB,OAAOrE,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMA,GAEd,CACI,OAAOhC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAE9D,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,G,gBCvXJ,MAAMqF,EAAgB,EAAQ,KAC9B,IAAI,oBAAEnG,GAAwB,EAAQ,IACtC,MAAMF,EAAO,EAAQ,KACfC,EAAO,EAAQ,KACfqG,EAAK,EAAQ,MACb,KAAEnH,GAAS,EAAQ,KACnBoH,EAAc,EAAQ,MACtB,gBAAEC,GAAoB,EAAQ,IACpC,IAAIC,EAAexG,EAAK2B,KAAKC,UAAW,KAAM,KAAM,kBAkPpDpD,EAAOC,QAAU,CACbgI,YAhPgBpG,MAAOC,EAAKC,KAC5B,IACI,IAAI,KAAEC,EAAI,YAAEkG,GAAgBpG,EAAIM,MAE5B,eAAE+F,GAAmBrG,EAAIW,MAE7B,IAAK0F,EACD,OAAOpG,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,+BAGrDsF,EAAGO,WAAWJ,IACfH,EAAGQ,UAAUL,GAGjB,IAAIrF,EAAmBlB,IACnB6G,EAAkB,mBAClBC,EAAchH,EAAKuB,KAAO,IAAMqF,EAAenG,KAAKe,MAAM,KAAKC,MAC/DwF,EAAa,UAAU7F,KAAoBjC,IAAO4H,IAClDG,EAAgBjH,EAAK2B,KAAK6E,EAAcO,SAEtCJ,EAAe9E,GAAGoF,GAExB,IAKIC,EAAc,CACd1G,OACAkG,cACAC,eARS,CACTQ,SAAUJ,EACVK,SAAUJ,IASVK,QAAoBjB,EAAc9D,OAAO4E,GAE7C,OAAO3G,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,iBACTwB,KAAM8E,GAEd,CAAE,MAAO5H,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EAuMDuG,gBAnMoBjH,MAAOC,EAAKC,KAChC,IACI,IAEIgH,GAFA,WAAEC,GAAelH,EAAIwD,OAGzB,GAAI0D,EAAY,CACZ,IAAKjB,EAAgBiB,GACjB,OAAOjH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,wBAE1DwG,QAAiBnB,EAAcqB,SAASD,EAC5C,CAEA,IAAKD,EACD,OAAOhH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAME,QAAS,uBAGzD,IAAI2G,QAAmBpB,EAAYrC,KAAK,CAAEuD,WAAYD,EAASlE,MAE/D,OAAO9C,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMgF,EACNI,SAAUD,GAElB,CAAE,MAAOjI,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EA0KD6G,oBArKyBvH,MAAOC,EAAKC,KACrC,IACI,IAAI,WAAEiH,GAAelH,EAAIwD,QACrB,YAAE+D,GAAgBvH,EAAIM,KAE1B,GAAI4G,EAAY,CACZ,IAAIM,QAAgBxB,EAAYrC,KAAK,CAAEuD,eAEvC,OAAOjH,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMuF,GAEd,CAAO,CACH,IAAIC,EAAS,CACTC,IAAK,CACD,CAAExH,KAAM,CAAEyH,OAAQJ,EAAaK,SAAU,MACzC,CAAEC,OAAQ,CAAEF,OAAQJ,EAAaK,SAAU,MAC3C,CAAEE,MAAO,CAAEH,OAAQJ,EAAaK,SAAU,MAC1C,CAAEG,QAAS,CAAEJ,OAAQJ,EAAaK,SAAU,MAC5C,CAAEI,WAAY,CAAEL,OAAQJ,EAAaK,SAAU,MAC/C,CAAExB,YAAa,CAAEuB,OAAQJ,EAAaK,SAAU,MAChD,CAAEK,MAAO,CAAEN,OAAQJ,EAAaK,SAAU,MAC1C,CAAEM,YAAa,CAAEP,OAAQJ,EAAaK,SAAU,QAIpDJ,QAAgBxB,EAAYrC,KAAK8D,GAErC,OAAOxH,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMuF,GAEd,CAEJ,CAAE,MAAOrI,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAgIA0H,iBA3HqBpI,MAAOC,EAAKC,KACjC,IACI,IAAImI,QAAsBtC,EAAcnC,KAAK,CAAC,GAE9C,OAAO1D,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMmG,GAEd,CAAE,MAAOjJ,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EAiHD4H,eA7GmBtI,MAAOC,EAAKC,KAC/B,IACI,IAAI,WAAEiH,GAAelH,EAAIwD,OACzB,IAAK0D,EACD,OAAOjH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAKwF,EAAgBiB,GACjB,OAAOjH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,wBAG1D,IAAIwG,QAAiBnB,EAAcqB,SAASD,GAE5C,IAAKD,EACD,OAAOhH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,uBAG1D,IAAI6H,EAAUtI,EAAIM,KAUlB,GARI,SAAUgI,IACVrB,EAAS/G,KAAOoI,EAAQpI,MAGxB,gBAAiBoI,IACjBrB,EAASb,YAAckC,EAAQlC,aAG/B,mBAAoBkC,GAAYtI,EAAIW,OAASX,EAAIW,MAAM0F,eAAiB,CACxE,IAAIA,EAAiBrG,EAAIW,MAAM0F,eAC/B,IAAKA,EACD,OAAOpG,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,gCAG1D,IAAII,EAAmBlB,IACnB6G,EAAkB,mBAClBC,EAAchH,EAAKuB,KAAO,IAAMqF,EAAenG,KAAKe,MAAM,KAAKC,MAC/DwF,EAAa,UAAU7F,KAAoBjC,IAAO4H,IAClDG,EAAgBjH,EAAK2B,KAAK6E,EAAcO,GAExC8B,EAAatB,EAASZ,eAAemC,UACzC,GAAID,EAAY,CACZ,IAAIE,EAAa/I,EAAK2B,KAAK6E,EAAcqC,GACrCxC,EAAGO,WAAWmC,IACd1C,EAAG2C,WAAWD,EAEtB,OAEMpC,EAAe9E,GAAGoF,GAExB,IAAIgC,EAAY,CACZH,UAAW/B,EACXmC,UAAWlC,GAGfO,EAASZ,eAAiBsC,CAC9B,CAIA,aAFM1B,EAAS7D,OAERnD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,gCACTwB,KAAMgF,GAEd,CAAE,MAAO9H,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EA4CDoI,eAvCmB9I,MAAOC,EAAKC,KAC/B,IACI,IAAI,WAAEiH,GAAelH,EAAIwD,OACzB,IAAK0D,EACD,OAAOjH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,2BAG1D,IAAIwG,QAAiBnB,EAAcqB,SAASD,GAE5C,IAAKD,EACD,OAAOhH,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4CAG1D,IAAI8H,EAAatB,EAASZ,eAAeQ,SACzC,GAAI0B,EAAY,CACZ,IAAIE,EAAa/I,EAAK2B,KAAK6E,EAAcqC,GACrCxC,EAAGO,WAAWmC,IACd1C,EAAG2C,WAAWD,EAEtB,CAIA,aAFM3C,EAAcgD,UAAU,CAAE/F,IAAKmE,IAE9BjH,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,iCAEjB,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,E,gBCtPL,MAAMsI,EAAgB,EAAQ,KACxBlJ,EAAY,EAAQ,KAsL1B3B,EAAOC,QAAU,CACb6K,eApLmBjJ,MAAOC,EAAKC,KAC/B,IACI,IAAI,WACAgJ,EAAU,OACVC,EAAM,OACNC,EAAM,MACNhJ,EAAK,OACLE,EAAM,QACN+I,EAAO,UACPC,EAAS,KACTC,EAAI,YACJC,EAAW,UACXC,EAAS,MACTC,EAAK,WACLC,EAAU,YACVC,EAAW,YACXC,EAAW,aACXC,EAAY,KACZC,EAAI,KACJC,EAAI,YACJC,EAAW,IACXC,EAAG,MACHC,EAAK,WACL5F,GACAtE,EAAIM,KAEJ+G,EAAW,GAEf,IAAK,IAAI8C,KAAeP,EAAa,CACjC,IAAI,KAAE1J,EAAI,OAAE2H,EAAM,MAAEC,EAAK,QAAEC,EAAO,WAAEC,EAAU,MAAEoC,EAAK,KAAEC,EAAI,SAAEC,EAAQ,MAAErC,EAAK,YAAE7B,EAAW,aAAEmE,EAAY,WAAErD,EAAU,aAAEsD,EAAY,YAAEtC,GAAgBiC,EAEnJ9C,EAASoD,KAAK,CACVvK,OACA2H,SACAC,QACAC,UACAC,aACAoC,QACAC,OACAC,WACArC,QACA7B,cACAmE,eACArD,aACAsD,eACAtC,eAER,CAEA,IAAIwC,EAAe,CACfzB,aACAC,SACAC,SACAhJ,QACAE,SACA+I,UACAC,YACAC,OACAC,cACAC,YACAC,QACAC,aACAC,cACAC,cACAC,eACAC,OACAC,OACAC,cACAC,MACAC,QACA5F,cAGAqG,QAAmB5B,EAAc/G,OAAO0I,GAE5C,OAAOzK,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,wBACTwB,KAAM0I,GAEd,CAAE,MAAOxL,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAmGAmK,mBA/FuB7K,MAAOC,EAAKC,KACnC,IACI,IAAI,OAAEsD,GAAWvD,EAAIwD,OACrB,IAAKD,EACD,OAAOtD,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,uBAG1D,IAAIoK,QAAahL,EAAUuC,QAAQ,CAAEmB,WAErC,IAAKsH,EACD,OAAO5K,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAG1D,IAAIqK,QAA2B/B,EAAcpF,KAAK,CAAEJ,OAAQsH,EAAKtH,SAEjE,OAAOtD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAM6I,GAEd,CAAE,MAAO3L,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA0EAsK,gBAtEoBhL,MAAOC,EAAKC,KAChC,IACI,IAAI,QAAE+K,GAAYhL,EAAIwD,OAEtB,IAAKwH,EACD,OAAO/K,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,wBAIjB,IAAIwB,EAAOjC,EAAIM,MAEX,OAAEC,EAAM,SAAE0K,EAAQ,SAAEC,GAAajJ,EAEjCkJ,QAAcpC,EAAc3G,QAAQ,CAAEW,IAAKiI,IAE/C,IAAKG,EACD,OAAOlL,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oBAG1D,GAAqB,cAAjB0K,EAAM5K,OACN,OAAON,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oCAG1D,GAAqB,aAAjB0K,EAAM5K,OACN,OAAON,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mCAK1D,IAFgB,CAAC,YAAa,YAEf2K,SAAS7K,GACpB,OAAON,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,uDAG1D,IAAI4K,QAAoBtC,EAAcuC,iBAClC,CAAEvI,IAAKiI,GACP,CAAEO,KAAM,CAAEhL,OAAQA,EAAQ0K,SAAUA,EAAUC,SAAUA,IACxD,CAAEM,KAAK,IAGX,OAAOvL,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,+BACT4K,YAAaA,GAErB,CAAE,MAAOlM,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAuBAgL,aAlBiB1L,MAAOC,EAAKC,KAC7B,IACI,IAAIyL,QAAkB3C,EAAcpF,KAAK,CAAC,GAC1C,OAAO1D,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,+BACT4K,YAAaK,GAErB,CAAE,MAAOvM,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,G,gBCnLJ,MAAMqF,EAAgB,EAAQ,KACxB6F,EAAmB,EAAQ,MAE3B,oBAAEhM,IADa,EAAQ,KACG,EAAQ,KAElCF,EAAO,EAAQ,KACfC,EAAO,EAAQ,KACfqG,EAAK,EAAQ,MACb,KAAEnH,EAAI,eAAEE,GAAmB,EAAQ,MACnC,gBAAEmH,GAAoB,EAAQ,IAG9B8C,GAFc,EAAQ,KACV,EAAQ,KACJ,EAAQ,MAE9B,IAAI6C,EAAelM,EAAK2B,KAAKC,UAAW,KAAM,KAAM,gBAuMpDpD,EAAOC,QAAU,CACb0N,aArMiB9L,MAAOC,EAAKC,KAC7B,IACI,IAAI,OAAEsD,GAAWvD,EAAIwD,OAEjBsI,QAAmBhG,EAAcnC,KAAK,CAAC,GAIvCoI,SAFkBJ,EAAiBvJ,WAEV2J,aAEzBC,EAAc,KAKlB,OAJIzI,IACAyI,QAAoBjD,EAAcpF,KAAK,CAAEsF,WAAY1F,KAGlDtD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwL,aAAcH,EACdC,aAAcA,EACdC,eAER,CAAE,MAAO7M,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA8KAyL,kBAzKsBnM,MAAOC,EAAKC,KAClC,IACI,IAAI6L,QAAmBhG,EAAcnC,KAAK,CAAC,GAEvCoI,SADkBJ,EAAiBvJ,WACV2J,aACzBL,QAAkB3C,EAAcpF,KAAK,CAAC,GAC1C,OAAO1D,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwL,aAAcH,EACdC,aAAcA,EACdL,aAGR,CAAE,MAAOvM,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA0JA0L,mBArJuBpM,MAAOC,EAAKC,KACnC,IACI,IAAI,IAAEmM,GAAQpM,EAAIwD,OAClB,IAAK4I,EACD,OAAOnM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAG1D,GAAI2L,IAAQtN,EACR,OAAOmB,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,sBAG1D,IAAI4L,QAAkBV,EAAiBvJ,QAAQ,CAAC,GAE3CiK,IACDA,QAAkBV,EAAiB3J,OAAO,CAAC+J,aAAc,MAG7D,IAAI,WAAEO,GAAetM,EAAIM,KAErBiM,EAAaC,KAAKC,MAAMH,GAExBI,EAAc1M,EAAIW,MAAM+L,YAE5B,IAAKA,EACD,OAAOzM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,6BAGrDsF,EAAGO,WAAWsF,IACf7F,EAAGQ,UAAUqF,GAGjB,IAAIe,EAAQJ,EAAWI,MAGnBC,GAFSL,EAAWM,QAASN,EAAWM,OAC5BN,EAAW/D,UACX+D,EAAWK,WAEvB/L,EAAmBlB,IACnB6G,EAAkB,iBAClBC,EAAchH,EAAKuB,KAAO,IAAM0L,EAAYxM,KAAKe,MAAM,KAAKC,MAC5DwF,EAAa,UAAU7F,KAAoBjC,IAAO4H,IAClDG,EAAgBjH,EAAK2B,KAAKuK,EAAcnF,GAE5C,GAAKmG,EA2BE,OACGF,EAAYnL,GAAGoF,GAErB,IAAImG,EAAe,CACftE,UAAW/B,EACXmC,UAAWlC,GAGf2F,EAAUN,aAAatB,KAAKqC,SAEtBT,EAAUjJ,OAEhB,IAAI2I,EAAeM,EAAUN,aAE7B,OAAO9L,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,4BACTwB,KAAM8J,GAEd,CA9CgB,CACZ,IAAIgB,EAAWV,EAAUN,aAAaY,GAAOnE,UAC7C,GAAIuE,EAAU,CACV,IAAItE,EAAa/I,EAAK2B,KAAKuK,EAAcmB,GACrChH,EAAGO,WAAWmC,IACd1C,EAAG2C,WAAWD,EAEtB,OAEMiE,EAAYnL,GAAGoF,GAErB,IAAIqG,EAAmB,CACnBxE,UAAW/B,EACXmC,UAAWlC,GAGf2F,EAAUN,aAAaY,GAASK,QAE1BX,EAAUjJ,OAEhB,IAAI2I,EAAeM,EAAUN,aAE7B,OAAO9L,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,8BACTwB,KAAM8J,GAEd,CAoBJ,CAAE,MAAO5M,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA2DAwM,kBAtDsBlN,MAAOC,EAAKC,KAClC,IACI,IAAI,QAAEiN,EAAO,IAAEd,GAAQpM,EAAIwD,OAC3B,IAAK0J,IAAYd,EACb,OAAOnM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,GAAI2L,IAAQtN,EACR,OAAOmB,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,sBAG1D,IAAI4L,QAAkBV,EAAiBvJ,UAEvC,IAAKiK,EACD,OAAOpM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,iBAG1D,GAAI4L,EAAUN,aAAa3G,OACvB,IAAK,IAAI+H,EAAI,EAAGA,EAAId,EAAUN,aAAa3G,OAAQ+H,IAC/C,GAAID,IAAYb,EAAUN,aAAaoB,GAAGpK,IAAIC,WAAY,CAEtD,IAAIoK,EAAUf,EAAUN,aAAaoB,GAAG3E,UACxC,GAAI4E,EAAS,CACT,IAAIC,EAAU3N,EAAK2B,KAAKuK,EAAcwB,GAClCrH,EAAGO,WAAW+G,IACdtH,EAAG2C,WAAW2E,EAEtB,CAEA,IAAIC,EAAMjB,EAAUN,aACpBuB,EAAIC,OAAOJ,EAAG,GACdd,EAAUN,aAAeuB,QACnBjB,EAAUjJ,MACpB,CAIR,IAAI2I,EAAeM,EAAUN,aAE7B,OAAO9L,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,8BACTwB,KAAM8J,GAEd,CAAE,MAAO5M,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,E,gBCjNL,MAAMZ,EAAY,EAAQ,KACpB2N,EAAe,EAAQ,MAEvB,eAAE1O,GAAmB,EAAQ,KAC7BkH,EAAc,EAAQ,KAwG5B9H,EAAOC,QAAU,CACbsP,cArGkB1N,MAAOC,EAAKC,KAC9B,IACI,IAEIyN,EACAC,GAHA,OAAEpK,EAAM,SAAEqK,EAAQ,UAAEC,EAAS,YAAEC,GAAgB9N,EAAIM,KAKvD,GACIoN,EAAY/K,KAAKC,MAAM,IAA6B,WAAhBD,KAAKoL,UACzCJ,QAA8BH,EAAapL,QAAQ,CAAEsL,oBAChDC,GAET,IAAIK,EAAa,CACbN,YACAnK,SACAqK,WACAC,YACAC,eAGAG,QAAmBT,EAAaxL,OAAOgM,GAE3C,OAAO/N,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMgM,GAEd,CAAE,MAAO9O,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAyEAyN,gBApEoBnO,MAAOC,EAAKC,KAChC,IACI,IAAI,IAAEmM,GAAQpM,EAAIwD,OAElB,IAAK4I,EACD,OAAOnM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oBAG1D,GAAI2L,IAAQtN,EACR,OAAOmB,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAG1D,IAAI0N,QAAkBX,EAAa7J,KAAK,CAAC,GAErCyK,EAAS,GACb,GAAID,EAAU/I,OACV,IAAK,IAAIiJ,KAAWF,EAAW,CAC3B,IAAItG,QAAe7B,EAAY5D,QAAQ,CAAGW,IAAKsL,EAAQC,SAAStL,aAG5DuL,EAAS,CACTF,QAASA,EACTxG,OAAQA,EACRgD,WALahL,EAAUuC,QAAQ,CAAEmB,OAAQ8K,EAAQ9K,UAQrD6K,EAAO3D,KAAK8D,EAChB,CAGJ,OAAOtO,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMmM,GAEd,CAAE,MAAOjP,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAgCA+N,cA3BkBzO,MAAOC,EAAKC,KAC9B,IACI,IAAI,UAAEyN,GAAc1N,EAAIwD,OAExB,OAAKkK,QAIsBF,EAAa1E,UAAU,CAAE/F,IAAK2K,IAMlDzN,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,iCALFR,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,sBAN/CR,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,0BAa9D,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,E,gBCxGL,MAAMuF,EAAc,EAAQ,KAE5B,IAAI,oBAAErG,GAAwB,EAAQ,IACtC,MAAMF,EAAO,EAAQ,KACfC,EAAO,EAAQ,KACfqG,EAAK,EAAQ,MACb,KAAEnH,EAAI,eAAEE,GAAmB,EAAQ,MACnC,gBAAEmH,GAAoB,EAAQ,IAEpC,IAAIwI,EAAkB/O,EAAK2B,KAAKC,UAAW,KAAM,KAAM,gBA2XvDpD,EAAOC,QAAU,CACbuQ,UAxXc3O,MAAOC,EAAKC,KAC1B,IACI,IAAI,IAAEmM,GAAQpM,EAAIwD,OAElB,IAAK4I,EACD,OAAOnM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oBAG1D,GAAI2L,IAAQtN,EACR,OAAOmB,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,sBAG1D,IAAI,KACAP,EAAI,OACJ2H,EAAM,MACNC,EAAK,QACLC,EAAO,WACPC,EAAU,MACVoC,EAAK,KACLC,EAAI,SACJC,EAAQ,MACRrC,EAAK,YACL7B,EAAW,aACXmE,EAAY,WACZrD,EAAU,YACVgB,GACAlI,EAAIM,KAEJqO,EAAU,CACVzO,OACA2H,SACAC,QACAC,UACAC,aACAoC,QACAC,OACAC,WACArC,QACA7B,cACAmE,eACArD,aACAgB,eAGA0G,QAAkB5I,EAAYhE,OAAO2M,GAEzC,OAAO1O,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,4BACToO,SAAUD,GAGlB,CAAE,MAAOzP,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAmUAqO,sBA9T0B/O,MAAOC,EAAKC,KACtC,IACI,IAAI,SAAEqO,GAAatO,EAAIwD,OACvB,IAAK8K,EACD,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAG1D,IAAKwF,EAAgBqI,GACjB,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,wBAG1D,IAAIoH,QAAe7B,EAAYmB,SAASmH,GAExC,IAAKzG,EACD,OAAO5H,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,qBAG1D,IAAI,WAAE6L,GAAetM,EAAIM,KAErBiM,EAAaC,KAAKC,MAAMH,GAExByC,EAAY/O,EAAIW,MAAMoO,UAE1B,IAAKA,EACD,OAAO9O,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,+BAGrDsF,EAAGO,WAAWmI,IACf1I,EAAGQ,UAAUkI,GAGjB,IAAI9B,EAAQJ,EAAWI,MAGnBC,GAFSL,EAAWM,QAASN,EAAWM,OAC5BN,EAAW/D,UACX+D,EAAWK,WAEvB/L,EAAmBlB,IACnB6G,EAAkB,iBAClBC,EAAchH,EAAKuB,KAAO,IAAM+N,EAAU7O,KAAKe,MAAM,KAAKC,MAC1DwF,EAAa,UAAU7F,KAAoBjC,IAAO4H,IAClDG,EAAgBjH,EAAK2B,KAAKoN,EAAiBhI,GAE/C,GAAKmG,EA2BE,OACGmC,EAAUxN,GAAGoF,GAEnB,IAAImG,EAAe,CACfjG,SAAUJ,EACVK,SAAUJ,GAGdmB,EAAO2C,aAAaC,KAAKqC,SAEnBjF,EAAOzE,OAEb,IAAIoH,EAAe3C,EAAO2C,aAE1B,OAAOvK,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,kCACTwB,KAAMuI,GAEd,CA9CgB,CACZ,IAAIuC,EAAWlF,EAAO2C,aAAamC,GAAO9F,SAC1C,GAAIkG,EAAU,CACV,IAAItE,EAAa/I,EAAK2B,KAAKoN,EAAiB1B,GACxChH,EAAGO,WAAWmC,IACd1C,EAAG2C,WAAWD,EAEtB,OAEMsG,EAAUxN,GAAGoF,GAEnB,IAAIqG,EAAmB,CACnBnG,SAAUJ,EACVK,SAAUJ,GAGdmB,EAAO2C,aAAamC,GAASK,QAEvBnF,EAAOzE,OAEb,IAAIoH,EAAe3C,EAAO2C,aAE1B,OAAOvK,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,oCACTwB,KAAMuI,GAEd,CAoBJ,CAAE,MAAOrL,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAoOAuO,kBA/NsBjP,MAAOC,EAAKC,KAClC,IACI,IAAI,SAAEqO,EAAQ,QAAEpB,GAAYlN,EAAIwD,OAChC,IAAK0J,IAAYoB,EACb,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,IAAIoH,QAAe7B,EAAYmB,SAASmH,GAExC,IAAKzG,EACD,OAAO5H,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,iBAW1D,IAAK,IAAIwO,KAAOpH,EAAO2C,aACnB,GAAK0C,IAAY+B,EAAIlM,IAAIC,WAAa,CAClC,IAAI+J,EAAWkC,EAAIpI,SACnB,GAAIkG,EAAU,CACV,IAAItE,EAAa/I,EAAK2B,KAAKoN,EAAiB1B,GACxChH,EAAGO,WAAWmC,IACd1C,EAAG2C,WAAWD,EAEtB,CAEA,IAAI6E,EAAMzF,EAAO2C,aACb0E,EAAM5B,EAAI6B,QAAQF,GACtB3B,EAAIC,OAAO2B,EAAK,GAChBrH,EAAO2C,aAAe8C,QAChBzF,EAAOzE,MACjB,CAGJ,IAAIoH,EAAe3C,EAAO2C,aAE1B,OAAOvK,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,oCACTwB,KAAMuI,GAEd,CAAE,MAAOrL,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAgLA2O,iBA3KqBrP,MAAOC,EAAKC,KACjC,IAWI,IAAIuH,QAAgBxB,EAAYrC,KAAK,CAAC,GAEtC,OAAO1D,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAMuF,GAEd,CAAE,MAAOrI,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAuJA4O,aAlJiBtP,MAAOC,EAAKC,KAC7B,IACI,IAAI,SAAEqO,GAAatO,EAAIwD,OACvB,IAAK8K,EACD,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,yBAIjB,IAAKwF,EAAgBqI,GACjB,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,qBAIjB,IAAI6O,QAAUtJ,EAAYmB,SAASmH,GAEnC,IAAKgB,EACD,OAAOrP,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,qBAIjB,IAAI8O,EAAIvP,EAAIM,KAwDZ,MAtDI,SAAUiP,IACVD,EAAEpP,KAAOqP,EAAErP,MAGX,WAAYqP,IACZD,EAAEzH,OAAS0H,EAAE1H,QAGb,UAAW0H,IACXD,EAAExH,MAAQyH,EAAEzH,OAGZ,YAAayH,IACbD,EAAEvH,QAAUwH,EAAExH,SAGd,eAAgBwH,IAChBD,EAAEtH,WAAauH,EAAEvH,YAGjB,UAAWuH,IACXD,EAAElF,MAAQmF,EAAEnF,OAGZ,SAAUmF,IACVD,EAAEjF,KAAOkF,EAAElF,MAGX,aAAckF,IACdD,EAAEhF,SAAWiF,EAAEjF,UAGf,UAAWiF,IACXD,EAAErH,MAAQsH,EAAEtH,OAGZ,gBAAiBsH,IACjBD,EAAElJ,YAAcmJ,EAAEnJ,aAGlB,iBAAkBmJ,IAClBD,EAAE/E,aAAegF,EAAEhF,cAGnB,eAAgBgF,IAChBD,EAAEpI,WAAaqI,EAAErI,YAGjB,gBAAiBqI,IACjBD,EAAEpH,YAAcqH,EAAErH,mBAGhBoH,EAAElM,OAEDnD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,8BACToO,SAAUS,GAElB,CAAE,MAAOnQ,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA0DA+O,aArDiBzP,MAAOC,EAAKC,KAC7B,IACI,IAAI,SAAEqO,GAAatO,EAAIwD,OACvB,IAAK8K,EACD,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,yBAIjB,IAAKwF,EAAgBqI,GACjB,OAAOrO,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,qBAIjB,IAAI6O,QAAUtJ,EAAYmB,SAASmH,GAEnC,IAAKgB,EACD,OAAOrP,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,qBAIjB,IAAK,IAAIwO,KAAOK,EAAE9E,aAAc,CAC5B,IAAIiF,EAASR,EAAIpI,SACjB,GAAI4I,EAAQ,CACR,IAAIhH,EAAa/I,EAAK2B,KAAKoN,EAAiBgB,GACxC1J,EAAGO,WAAWmC,IACd1C,EAAG2C,WAAWD,EAEtB,CACJ,CAGA,aADMzC,EAAY0J,iBAAiB,CAAE3M,IAAKuL,IACnCrO,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,+BAEjB,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,G,gBChYJ,MAAMZ,EAAY,EAAQ,KAEpB8P,GADa,EAAQ,KACF,EAAQ,OAI3B,oBAAEhQ,EAAmB,6BAAEC,IAHhB,EAAQ,KACR,EAAQ,KACV,EAAQ,KAC2C,EAAQ,MAChE,KAAEhB,GAAS,EAAQ,MACnB,gBAAEqH,GAAoB,EAAQ,KAE9B,eAAEnH,GAAmB,EAAQ,KAgOnCZ,EAAOC,QAAU,CACbyR,iBA7NqB7P,MAAOC,EAAKC,KACjC,IACI,IAAI,MAAEE,EAAK,MAAE0P,EAAK,WAAEnP,EAAU,KAAER,EAAI,OAAEqD,GAAWvD,EAAIM,KAErD,MAAMwP,QAAqBjQ,EAAUuC,QAAQ,CAAEmB,OAAQA,IAEvD,GAAKuM,EAiBD,OAAO7P,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,4BACTwB,KAAM6N,IApBK,CACf,IAAIC,EAAU,CACVxM,SACArD,OACAC,QACA0P,QACAnP,cAGAsP,QAAgBnQ,EAAUmC,OAAO+N,GAErC,OAAO9P,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,4BACTwB,KAAM+N,GAEd,CAQJ,CAAE,MAAO7Q,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GA8LAwP,WAzLelQ,MAAOC,EAAKC,KAC3B,IACI,MAAM,OAAEsD,GAAWvD,EAAIwD,OAEvB,IAAKD,EACD,OAAOtD,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,uBAG1D,IAAIoK,QAAahL,EAAUuC,QAAQ,CAAEmB,WAErC,IAAKsH,EACD,OAAO5K,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,mBAIjB,IAAI6H,EAAUtI,EAAIM,KA0ClB,MAxCI,SAAUgI,IACVuC,EAAK3K,KAAOoI,EAAQpI,MAGpB,UAAWoI,IACXuC,EAAKgF,MAAQvH,EAAQuH,OAGrB,WAAYvH,IACZuC,EAAKqF,OAAS5H,EAAQ4H,QAGtB,kBAAmB5H,IACnBuC,EAAKsF,cAAgB7H,EAAQ6H,eAG7B,YAAa7H,IACT,YAAaA,EAAQ8H,UACrBvF,EAAKuF,QAAQhH,QAAUd,EAAQ8H,QAAQhH,SAGvC,cAAed,EAAQ8H,UACvBvF,EAAKuF,QAAQ/G,UAAYf,EAAQ8H,QAAQ/G,WAGzC,SAAUf,EAAQ8H,UAClBvF,EAAKuF,QAAQ9G,KAAOhB,EAAQ8H,QAAQ9G,MAGpC,cAAehB,EAAQ8H,UACvBvF,EAAKuF,QAAQ5G,UAAYlB,EAAQ8H,QAAQ5G,WAGzC,UAAWlB,EAAQ8H,UACnBvF,EAAKuF,QAAQ3G,MAAQnB,EAAQ8H,QAAQ3G,cAIvCoB,EAAKzH,OAEJnD,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,4BACTwB,KAAM4I,GAGd,CAAE,MAAO1L,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAuHA4P,WAvDetQ,MAAOC,EAAKC,KAC3B,IACI,IAAI,OAAEsD,GAAWvD,EAAIwD,OAErB,IAAKD,EACD,OAAOtD,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,uBAG1D,IAAIoK,QAAahL,EAAUuC,QAAQ,CAAEmB,WAErC,IAAKsH,EACD,OAAO5K,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,mBAIjB,MAAM,OAAE6P,EAAM,SAAEpF,GAAYlL,EAAIM,KAEhC,IAEIiQ,EAAW,CACX1F,OACApH,sBAJwBC,aAAaC,KAAK,CAAEJ,YAO5CiN,EAAUhE,KAAKiE,UAAUF,SAEvB1Q,EAAUiJ,UAAU,CAAEvF,WAE5B,IAAImN,EAAkB,CAClBnN,SACAmN,gBAAiBF,EACjBF,OAAQA,GAAgB,GACxBpF,SAAUA,GAAoB,GAC9ByF,WAAW,IAAInO,MAAOoO,kBAK1B,aAFMjB,EAAiB3N,OAAO0O,GAEvBzQ,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,6BAGjB,CAAE,MAAOtB,GAEL,OADAC,QAAQC,IAAI,sBAAuBF,EAAMsB,SAClCR,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EAQDoQ,YAnHgB9Q,MAAOC,EAAKC,KAC5B,IACI,IAAI,OAAEsD,EAAM,IAAE6I,GAAQpM,EAAIwD,OAE1B,IAAKD,IAAW6I,EACZ,OAAOnM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,4BAG1D,GAAI2L,IAAQtN,EACR,OAAOmB,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,sBAG1D,IAAIoK,QAAahL,EAAUuC,QAAQ,CAAEmB,WAErC,OAAKsH,EAOE5K,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAM4I,IATC5K,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,kBAUrB,CAAE,MAAOtB,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,EAuFDqQ,YAlFgB/Q,MAAOC,EAAKC,KAC5B,IACI,IAAI,IAAEmM,GAAQpM,EAAIwD,OAElB,IAAK4I,EACD,OAAOnM,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oBAG1D,GAAI2L,IAAQtN,EACR,OAAOmB,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,sBAG1D,IAAIsQ,QAAclR,EAAU8D,KAAK,CAAC,GAClC,OAAO1D,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,UACTwB,KAAM8O,GAEd,CAAE,MAAO5R,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,CAAC,E,UCjLL,MAAMuQ,UAAkBC,MACpB,WAAAC,CAAYhR,EAAMiR,EAAY/K,EAAagL,GACvCC,MAAMjL,GACNkL,KAAKpR,KAAOA,EACZoR,KAAKH,WAAaA,EAClBG,KAAKF,QAAUA,CACnB,EAGJlT,EAAOC,QAAU6S,C,gBCTjB,MAAM,gBAAE/K,GAAoB,EAAQ,KAC9B,eAAEvH,GAAmB,EAAQ,KAC7BY,EAAa,EAAQ,KACrBC,EAAM,EAAQ,KA4EpBrB,EAAOC,QAAU,CAAEoT,eAxEIxR,MAAOC,EAAKC,EAAKuR,KACpC,IACI,IAAIC,EAAkBzR,EAAI0R,QAAuB,cAEjD,IAAKD,EACD,OAAOxR,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,sBAIjB,IAUIkR,EATA9O,EADa4O,EAAgBxQ,MAAM,KAChB,GAEvB,IAAK4B,EACD,OAAO5C,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,kBAMjBlB,EAAIqS,OAAO/O,EAAOnE,GAAgB,CAAC8C,EAAKqQ,KACpC,GAAIrQ,EACA,MAAMA,EAGVmQ,EAAeE,EACf,IAAIC,EAAcH,EAAa9P,QAC/B7B,EAAa,QAAI8R,EACjBN,GAAM,GAGd,CAAE,MAAOrS,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,GAoC+BsR,cA/BbhS,MAAOC,EAAKC,EAAKuR,KACnC,IACI,IAAIQ,EAAUhS,EAAI6B,SACd,QAAEA,GAAY7B,EAAIwD,OAEtB,IAAKyC,EAAgBpE,GACjB,OAAO5B,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,mBAG1D,IAAI0B,QAAc7C,EAAW6H,SAAStF,GAEtC,IAAKM,EACD,OAAOlC,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAS,oBAG1D,IAAIwR,EAAU9P,EAAMY,IAEpB,GAAKiP,EAAQhP,aAAeiP,EAAQjP,WAChC,OAAO/C,EAAIM,OAAO,KAAKC,KAAK,CACxBD,QAAQ,EACRE,QAAS,sBAIjB+Q,GACJ,CAAE,MAAOrS,GACL,OAAOc,EAAIM,OAAO,KAAKC,KAAK,CAAED,QAAQ,EAAOE,QAAStB,EAAMsB,SAChE,G,gBC3EJ,MAAMzB,EAAW,EAAQ,IAInBkT,GAHWlT,EAASmT,OAAOC,MAAMC,SAGnB,IAAIrT,EAASmT,OAAO,CACpCtQ,QAAS,CACLyQ,KAAMtO,QAGVlC,aAAc,CACVwQ,KAAMtO,QAGV9D,KAAM,CACFoS,KAAMtO,QAGV7D,MAAO,CACHmS,KAAMtO,QAGV5D,SAAU,CACNkS,KAAMtO,QAGV3D,OAAQ,CACJiS,KAAMtO,QAGVtD,WAAY,CACRgB,QAAS,CACL4Q,KAAMtO,QAEVrC,QAAS,CACL2Q,KAAMtO,UAGf,CAACuO,YAAY,KAEhBrU,EAAOC,QAAUa,EAASwT,MAAM,QAASN,E,gBCvCzC,MAAMlT,EAAW,EAAQ,IAEnByT,EAAoB,IAAIzT,EAASmT,OAAO,CAC1CpG,aAAc,CACV,CACIvD,UAAW,CAAE8J,KAAMtO,OAAQ0O,QAAS,IACpC9J,UAAW,CAAE0J,KAAMtO,OAAQ0O,QAAS,OAG7C,CAAEH,YAAY,IAGjBrU,EAAOC,QAAUa,EAASwT,MAAM,cAAeC,E,gBCZ/C,MAAMzT,EAAW,EAAQ,IAGnB2T,GAFW3T,EAASmT,OAAOC,MAAMC,SAEhB,IAAIrT,EAASmT,OAAO,CACvCjS,KAAM,CACFoS,KAAMtO,OACN0O,QAAS,IAGbtM,YAAa,CACTkM,KAAMtO,OACN0O,QAAS,IAGbrM,eAAgB,CACZQ,SAAU,CACNyL,KAAMtO,OACN0O,QAAS,IAGb5L,SAAU,CACNwL,KAAMtO,OACN0O,QAAS,KAIjBE,SAAU,CACNN,KAAMtO,OACN6O,KAAM,CAAC,GAAI,MAGhB,CAACN,YAAY,KAEhBrU,EAAOC,QAAUa,EAASwT,MAAM,WAAYG,E,gBCjC5C,MAAM3T,EAAW,EAAQ,IAEnB8T,EAAiB,IAAI9T,EAASmT,OAChC,CACIlJ,WAAY,CAAEqJ,KAAMtO,QACpBkF,OAAQ,CAAEoJ,KAAMtO,QAChBmF,OAAQ,CAAEmJ,KAAMtO,QAChB7D,MAAO,CAAEmS,KAAMtO,QACf3D,OAAQ,CAAEiS,KAAMtO,QAChBoF,QAAS,CAAEkJ,KAAMtO,QACjBqF,UAAW,CAAEiJ,KAAMtO,QACnBsF,KAAM,CAAEgJ,KAAMtO,QACdwF,UAAW,CAAE8I,KAAMtO,QACnByF,MAAO,CAAE6I,KAAMtO,QACf0F,WAAY,CAAE4I,KAAMtO,QACpB2F,YAAa,CAAE2I,KAAMtO,QACrBuF,YAAa,CAAE+I,KAAMtO,QACrB4F,YAAa,CACT,CACI1J,KAAM,CAAEoS,KAAMtO,QACd6D,OAAQ,CAAEyK,KAAMtO,QAChB8D,MAAO,CAAEwK,KAAMtO,QACf+D,QAAS,CAAEuK,KAAMtO,QACjBgE,WAAY,CAAEsK,KAAMtO,QACpBoG,MAAO,CAAEkI,KAAMS,QACf1I,KAAM,CAAEiI,KAAMtO,QACdsG,SAAU,CAAEgI,KAAMtO,QAClBiE,MAAO,CAAEqK,KAAMtO,QACfoC,YAAa,CAAEkM,KAAMtO,QACrBuG,aAAc,CAAE+H,KAAMtO,QACtBkD,WAAY,CAAEoL,KAAMtO,QACpBwG,aAAc,CACV,CACI3D,SAAU,CAAEyL,KAAMtO,QAClB8C,SAAU,CAAEwL,KAAMtO,UAG1BkE,YAAa,CACT,CACIoK,KAAMtT,EAASmT,OAAOC,MAAMY,UAK5CnJ,aAAc,CAAEyI,KAAMS,QACtBjJ,KAAM,CAAEwI,KAAMS,QACdhJ,KAAM,CAAEuI,KAAMS,QACd/I,YAAa,CAAEsI,KAAMtO,QACrBiG,IAAK,CAAEqI,KAAMS,QACb7I,MAAO,CAAEoI,KAAMS,QACfzO,WAAY,CAAEgO,KAAMS,QACpBxS,OAAQ,CACJ+R,KAAMtO,OACN6O,KAAM,CAAC,UAAW,WAAY,WAAY,UAAW,YAAa,aAClEH,QAAS,WAEbzH,SAAU,CAAEqH,KAAMtO,QAClBkH,SAAU,CAAEoH,KAAMtO,SAEtB,CAAEuO,YAAY,IAGlBrU,EAAOC,QAAUa,EAASwT,MAAM,WAAYM,E,gBC9D5C,MAAM9T,EAAW,EAAQ,IAGnBiU,EAAoB,IAAIjU,EAASmT,OAAO,CAC1C5O,OAAQ,CACJ+O,KAAMtO,QAGV0M,gBAAiB,CACb4B,KAAMtO,QAGVsM,OAAQ,CACJgC,KAAMtO,QAGVkH,SAAU,CACNoH,KAAMtO,QAGV2M,UAAW,CACP2B,KAAMtO,SAEX,CAACuO,YAAY,IAGhBrU,EAAOC,QAAUa,EAASwT,MAAM,cAAeS,E,gBC1B/C,MAAMjU,EAAW,EAAQ,IACnBqT,EAAWrT,EAASmT,OAAOC,MAAMC,SAEjCa,EAAgB,IAAIlU,EAASmT,OAAO,CAEtCzE,UAAW,CACP4E,KAAMtO,QAGVT,OAAQ,CACJ+O,KAAMtO,OACN0O,QAAS,IAGbpE,SAAU,CACNgE,KAAMD,EACNc,IAAK,UAGTtF,UAAW,CAAE7J,QAEb8J,YAAa,CACTwE,KAAMtO,SAEX,CAAEuO,YAAY,IAEjBrU,EAAOC,QAAUa,EAASwT,MAAM,UAAWU,E,gBC1B3C,MAAMlU,EAAW,EAAQ,IAInBoU,GAHWpU,EAASmT,OAAOC,MAAMC,SAGlB,IAAIrT,EAASmT,OAAO,CACrCjS,KAAM,CAAEoS,KAAMtO,QACd6D,OAAQ,CAAEyK,KAAMtO,QAChB8D,MAAO,CAAEwK,KAAMtO,QACf+D,QAAS,CAAEuK,KAAMtO,QACjBgE,WAAY,CAAEsK,KAAMtO,QACpBoG,MAAO,CAAEkI,KAAMS,QACf1I,KAAM,CAAEiI,KAAMtO,QACdsG,SAAU,CAAEgI,KAAMtO,QAClBiE,MAAO,CAAEqK,KAAMtO,QACfoC,YAAa,CAAEkM,KAAMtO,QACrBuG,aAAc,CAAE+H,KAAMtO,QACtBkD,WAAY,CAAEoL,KAAMtO,QACpBwG,aAAc,CACV,CACI3D,SAAU,CAAEyL,KAAMtO,QAClB8C,SAAU,CAAEwL,KAAMtO,UAG1BkE,YAAa,CACT,CACIoK,KAAMtT,EAASmT,OAAOC,MAAMY,SAGrC,CAAET,YAAY,KAEjBrU,EAAOC,QAAUa,EAASwT,MAAM,SAAUY,E,gBC9B1C,MAAMpU,EAAW,EAAQ,IAGnBqU,GAFWrU,EAASmT,OAAOC,MAAMC,SAEpB,IAAIrT,EAASmT,OAC5B,CACI5O,OAAQ,CACJ+O,KAAMtO,OACNsP,QAAQ,EACRC,MAAM,EACNb,QAAS,IAGbxS,KAAM,CACFoS,KAAMtO,OACNwP,UAAU,EACVD,MAAM,GAGV7S,WAAY,CACR4R,KAAMtO,QAGVkM,OAAQ,CACJoC,KAAMtO,OACN6O,KAAM,CAAC,OAAQ,SAAU,QAAS,aAClCH,QAAS,aAGbtC,QAAS,CACLhH,QAAS,CACLkJ,KAAMtO,OACN0O,QAAS,IAGbrJ,UAAW,CACPiJ,KAAMtO,OACN0O,QAAS,IAGbpJ,KAAM,CACFgJ,KAAMtO,OACN0O,QAAS,IAGblJ,UAAW,CACP8I,KAAMtO,OACN0O,QAAS,IAGbjJ,MAAO,CACH6I,KAAMtO,OACN0O,QAAS,KAIjBvS,MAAO,CACHmS,KAAMtO,OACN0O,QAAS,IAGb7C,MAAO,CACHyC,KAAMtO,OACN0O,QAAS,IAGbvC,cAAe,CACXmC,KAAMtO,OACN0O,QAAS,KAGjB,CAAEH,YAAY,KAGlBrU,EAAOC,QAAUa,EAASwT,MAAM,OAAQa,E,gBCzExC,MACMI,EADU,EAAQ,KACDC,UAEjB,YACF5T,EAAW,WACXoC,EAAU,kBACV0B,EAAiB,mBACjBe,EAAkB,oBAClBU,EAAmB,mBACnBK,EAAkB,qBAClBpC,GACA,EAAQ,MAEN,eAAEiO,EAAc,cAAEQ,GAAkB,EAAQ,KAGlD0B,EAAOE,KAAK,2BAA4B7T,GAGxC2T,EAAOE,KAAK,0BAA2BzR,GAGvCuR,EAAOG,IAAI,0DAA2DhQ,GAGtE6P,EAAOG,IAAI,0EAA2EjP,GAGtF8O,EAAOG,IAAI,kEAAmEvO,GAG9EoO,EAAOG,IAAI,0DAA2DlO,GAGtE+N,EAAOG,IAAI,4DAA6DtQ,GAGxEpF,EAAOC,QAAUsV,C,gBCrCjB,MACMA,EADU,EAAQ,KACDC,UAEjB,YACFvN,EAAW,gBACXa,EAAe,oBACfM,EAAmB,iBACnBa,EAAgB,eAChBE,EAAc,eACdQ,GACC,EAAQ,KAGb4K,EAAOE,KAAK,sBAAuBxN,GAGnCsN,EAAOE,KAAK,kCAAmC3M,GAG/CyM,EAAOE,KAAK,gDAAiDrM,GAG7DmM,EAAOG,IAAI,2BAA4BzL,GAGvCsL,EAAOI,IAAI,qCAAsCxL,GAGjDoL,EAAOK,OAAO,qCAAsCjL,GAGpD3K,EAAOC,QAAUsV,C,gBC/BjB,MACMA,EADU,EAAQ,KACDC,UAEjB,eACF1K,EAAc,mBACd4B,EAAkB,gBAClBG,EAAe,aACfU,GACA,EAAQ,KAGZgI,EAAOE,KAAK,yBAA0B3K,GAGtCyK,EAAOG,IAAI,sCAAuChJ,GAGlD6I,EAAOI,IAAI,+BAAgC9I,GAG3C0I,EAAOG,IAAI,uBAAwBnI,GAGnCvN,EAAOC,QAAUsV,C,eCvBjB,MACMA,EADU,EAAQ,KACDC,UAEjB,aACF7H,EAAY,mBACZM,EAAkB,kBAClBc,EAAiB,kBACjBf,GACA,EAAQ,KAGZuH,EAAOG,IAAI,gCAAiC/H,GAI5C4H,EAAOG,IAAI,4BAA6B1H,GAGxCuH,EAAOI,IAAI,iCAAkC1H,GAG7CsH,EAAOK,OAAO,qCAAsC7G,GAGpD/O,EAAOC,QAAUsV,C,gBCxBjB,MACMA,EADU,EAAQ,KACDC,UAEjB,cAAEjG,EAAa,cAAEe,EAAa,gBAAEN,GAAoB,EAAQ,KAGlEuF,EAAOE,KAAK,wBAAyBlG,GAGrCgG,EAAOG,IAAI,+BAAgC1F,GAG3CuF,EAAOK,OAAO,mCAAoCtF,GAElDtQ,EAAOC,QAAUsV,C,gBCdjB,MACMA,EADU,EAAQ,KACDC,UAEjB,UACFhF,EAAS,sBACTI,EAAqB,kBACrBE,EAAiB,iBACjBI,EAAgB,aAChBC,EAAY,aACZG,GACA,EAAQ,KAGZiE,EAAOE,KAAK,yBAA0BjF,GAGtC+E,EAAOE,KAAK,4CAA6C7E,GAGzD2E,EAAOK,OAAO,+CAAgD9E,GAG9DyE,EAAOG,IAAI,2BAA4BxE,GAGvCqE,EAAOI,IAAI,iCAAkCxE,GAG7CoE,EAAOK,OAAO,iCAAkCtE,GAGhDtR,EAAOC,QAAUsV,C,gBC/BjB,MACMA,EADU,EAAQ,KACDC,UAEjB,iBACF9D,EAAgB,WAChBK,EAAU,YACVa,EAAW,YACXD,EAAW,WACXR,GACA,EAAQ,KAGZoD,EAAOE,KAAK,2BAA4B/D,GAGxC6D,EAAOG,IAAI,+BAAgC/C,GAG3C4C,EAAOG,IAAI,qBAAsB9C,GAGjC2C,EAAOE,KAAK,6BAA8B1D,GAG1CwD,EAAOK,OAAO,6BAA8BzD,GAG5CnS,EAAOC,QAAUsV,C,eC3BjB,MAAMzC,EAAY,EAAQ,MACpB,YAAE+C,GAAgB,EAAQ,KAoBhC7V,EAAOC,QAAU,CAAE6V,aAlBnB,SAAsBxS,EAAKxB,EAAKC,EAAKuR,GACjC,OAAIhQ,aAAewP,EACR/Q,EAAIM,OAAOiB,EAAI2P,YAAY8C,KAAK,CACnCC,SAAS,EACTzT,QAASe,EAAIf,QACbe,IAAKA,EAAI4P,QACTnP,KAAM,CAAC,IAIRhC,EAAIM,OAAOwT,EAAYI,uBAAuBF,KAAK,CACtDC,SAAS,EACTzT,QAAS,uBACTe,IAAKA,EACLS,KAAM,CAAC,GAEf,E,eCnBA,MAAMmS,EAAK,EAAQ,KAwBnBlW,EAAOC,QAAU,CACbwB,oBAtBsB,KACtB,IAAI0U,EAAoBD,EAAGC,oBAK3B,OAJgBC,OAAOC,OAAOF,GACzBG,OACA/M,QAAQgN,GAA2B,SAAjBA,EAAMC,SAAsBD,EAAME,WACpDC,KAAKH,GAAUA,EAAMrL,UAAS,EACnB,EAiBhBxJ,6BAbJ,SAAsCwF,GAClC,IAAIyP,EAAK,GAGT,IAAK,IAAI1H,EAAI,EAAGA,EAAI/H,EAAQ+H,IAExB0H,GAJe,iEAGKlS,KAAKC,MAAsBkS,GAAhBnS,KAAKoL,WAGxC,OAAO8G,CACX,E,uBCtBA3W,EAAOC,QAAU4W,QAAQ,S,uBCAzB7W,EAAOC,QAAU4W,QAAQ,c,uBCAzB7W,EAAOC,QAAU4W,QAAQ,O,uBCAzB7W,EAAOC,QAAU4W,QAAQ,S,uBCAzB7W,EAAOC,QAAU4W,QAAQ,U,uBCAzB7W,EAAOC,QAAU4W,QAAQ,qB,uBCAzB7W,EAAOC,QAAU4W,QAAQ,oB,uBCAzB7W,EAAOC,QAAU4W,QAAQ,e,sBCAzB7W,EAAOC,QAAU4W,QAAQ,W,uBCAzB7W,EAAOC,QAAU4W,QAAQ,O,uBCAzB7W,EAAOC,QAAU4W,QAAQ,K,uBCAzB7W,EAAOC,QAAU4W,QAAQ,K,uBCAzB7W,EAAOC,QAAU4W,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAahX,QAGrB,IAAID,EAAS8W,EAAyBE,GAAY,CAGjD/W,QAAS,CAAC,GAOX,OAHAkX,EAAoBH,GAAUhX,EAAQA,EAAOC,QAAS8W,GAG/C/W,EAAOC,OACf,CCtBA,MAAMmX,EAAU,EAAQ,KAClBC,EAAa,EAAQ,KACrBC,EAAa,EAAQ,KACrBC,EAAO,EAAQ,MACf,KAAE7W,GAAS,EAAQ,MACnB,YAAEK,GAAgB,EAAQ,MAC1B,aAAE+U,GAAiB,EAAQ,IAE3B0B,EAAMJ,IAEZI,EAAIC,IAAIL,EAAQrB,KAAK,CAAE2B,MAAO,UAC9BF,EAAIC,IAAIL,EAAQO,WAAW,CAAEC,UAAU,EAAMF,MAAO,UACpDF,EAAIC,IAAIJ,EAAWtB,KAAK,CAAE2B,MAAO,UACjCF,EAAIC,IAAIJ,EAAWQ,KAAK,CAAEH,MAAO,UAEjCF,EAAIC,IAAIH,KACRE,EAAIC,IAAIF,KAER,MAAMO,EAAc,EAAQ,KACtBC,EAAiB,EAAQ,KACzBC,EAAa,EAAQ,KACrBC,EAAe,EAAQ,KACvBC,EAAiB,EAAQ,KACzBC,EAAkB,EAAQ,IAC1BC,EAAgB,EAAQ,KAE9BZ,EAAIC,IAAI,cAAeL,EAAQiB,OAAOjV,UAAY,gBAClDoU,EAAIC,IAAI,gBAAiBL,EAAQiB,OAAOjV,UAAY,kBACpDoU,EAAIC,IAAI,kBAAmBL,EAAQiB,OAAOjV,UAAY,oBACtDoU,EAAIC,IAAI,SAAUL,EAAQiB,OAAOjV,UAAY,WAC7CoU,EAAIC,IAAI,gBAAiBL,EAAQiB,OAAOjV,UAAY,kBAEpDoU,EAAIC,IAAI,IAAKK,GACbN,EAAIC,IAAI,IAAKO,GACbR,EAAIC,IAAI,IAAKQ,GACbT,EAAIC,IAAI,IAAKS,GACbV,EAAIC,IAAI,IAAKU,GACbX,EAAIC,IAAI,IAAKW,GACbZ,EAAIC,IAAI,IAAKM,GAGbP,EAAI9B,IAAI,KAAK,CAAC5T,EAAKC,KACfA,EAAIO,KAAK,wCAAwC,IAIrDkV,EAAIC,IAAI3B,GAER0B,EAAIc,OAAO5X,GAAMmB,UACbX,QAAQC,IAAI,4BAA6BT,SAEnCK,IACNG,QAAQC,IAAI,qBAAqB,G","sources":["webpack://fabric-app/./src/config/config.js","webpack://fabric-app/./src/config/db.config.js","webpack://fabric-app/./src/controllers/adminController.js","webpack://fabric-app/./src/controllers/categoryController.js","webpack://fabric-app/./src/controllers/checkoutController.js","webpack://fabric-app/./src/controllers/dashboard.js","webpack://fabric-app/./src/controllers/enquiryController.js","webpack://fabric-app/./src/controllers/fabricController.js","webpack://fabric-app/./src/controllers/userController.js","webpack://fabric-app/./src/errors/base.error.js","webpack://fabric-app/./src/middlewares/auth.js","webpack://fabric-app/./src/models/adminModel.js","webpack://fabric-app/./src/models/bannerImageModel.js","webpack://fabric-app/./src/models/categoryModel.js","webpack://fabric-app/./src/models/checkoutModel.js","webpack://fabric-app/./src/models/deleteUserModel.js","webpack://fabric-app/./src/models/enquiryModel.js","webpack://fabric-app/./src/models/fabricModel.js","webpack://fabric-app/./src/models/userModel.js","webpack://fabric-app/./src/routes/v1/adminRoutes.js","webpack://fabric-app/./src/routes/v1/categoryRoutes.js","webpack://fabric-app/./src/routes/v1/checkoutRoutes.js","webpack://fabric-app/./src/routes/v1/dashboardRoutes.js","webpack://fabric-app/./src/routes/v1/enquiryRoutes.js","webpack://fabric-app/./src/routes/v1/fabricRoutes.js","webpack://fabric-app/./src/routes/v1/userRoutes.js","webpack://fabric-app/./src/uitls/errorHandler.js","webpack://fabric-app/./src/uitls/utils.js","webpack://fabric-app/external commonjs \"bcrypt\"","webpack://fabric-app/external commonjs \"body-parser\"","webpack://fabric-app/external commonjs \"cors\"","webpack://fabric-app/external commonjs \"dotenv\"","webpack://fabric-app/external commonjs \"express\"","webpack://fabric-app/external commonjs \"express-fileupload\"","webpack://fabric-app/external commonjs \"http-status-codes\"","webpack://fabric-app/external commonjs \"jsonwebtoken\"","webpack://fabric-app/external commonjs \"mongoose\"","webpack://fabric-app/external commonjs \"uuid\"","webpack://fabric-app/external node-commonjs \"fs\"","webpack://fabric-app/external node-commonjs \"os\"","webpack://fabric-app/external node-commonjs \"path\"","webpack://fabric-app/webpack/bootstrap","webpack://fabric-app/./index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    logDbUrl: process.env.LOG_DB_URL,\r\n    tokenSecretKey: process.env.JWT_SECRET,\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDbUrl } = require('./config');\r\n\r\nfunction connectToDB () {\r\n    try {\r\n        mongoose.connect(mongoDbUrl);\r\n    } catch (error) {\r\n        console.log(\"Unable to connect to database\");\r\n        return error;\r\n    };\r\n};\r\n\r\nmodule.exports = { connectToDB };\r\n","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\nconst userModel = require(\"../models/userModel\");\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let { profilePic } = req.files;\r\n\r\n        if (!profilePic) {\r\n            return res.status(400).send({ status: false, message: \"No profile pic uploaded\" });\r\n        }\r\n\r\n        let hashedPassward = await bcrypt.hash(password, 10);\r\n        password = hashedPassward;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let profilePicPath = \"/adminImages/\";\r\n        let profilePicName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n        let profilePicFullPath = `http://${currentIpAddress}:${port}${profilePicPath}`;\r\n\r\n        let picSavingPath = path.join(__dirname, \"..\", \"..\", \"adminImages\", profilePicName);\r\n\r\n        profilePic.mv(picSavingPath, (err) => {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n\r\n        picObj = {\r\n            picName: profilePicName,\r\n            picPath: profilePicFullPath,\r\n        };\r\n\r\n        let adminObj = {\r\n            adminId: generateRandomAlphaNumericID(26),\r\n            sessionToken: generateRandomAlphaNumericID(51),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n            profilePic: picObj,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADMIN LOGIN\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            return res.status(400).send({ status: false, message: \"Email and password are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, function (err, result) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        async function hasAccess(result) {\r\n            if (result) {\r\n                let data = {};\r\n                let date = Date.now();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: admin.email,\r\n                        adminId: admin._id.toString(),\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                (data._id = admin._id.toString()), (data.email = email);\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n                admin.sessionToken = generateRandomAlphaNumericID(51);\r\n\r\n                await admin.save();\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Successfully login\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, '0');\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, '0');\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            };\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port } = require(\"../config/config\");\r\nconst fabricModel = require(\"../models/fabricModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nlet catImgFolder = path.join(__dirname, \"..\", \"..\", \"categoryImages\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n    try {\r\n        let { name, description } = req.body;\r\n\r\n        let { category_image } = req.files;\r\n\r\n        if (!category_image) {\r\n            return res.status(400).send({ status: false, message: \"No category Image uploaded\" });\r\n        };\r\n\r\n        if (!fs.existsSync(catImgFolder)) {\r\n            fs.mkdirSync(catImgFolder);\r\n        };\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/categoryImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + category_image.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(catImgFolder, imgUniqName);\r\n\r\n        await category_image.mv(imgSavingPath);\r\n\r\n        let imgObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgFullUrl,\r\n        };\r\n\r\n        let categoryObj = {\r\n            name,\r\n            description,\r\n            category_image: imgObj,\r\n        };\r\n\r\n        let newCategory = await categoryModel.create(categoryObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category Added\",\r\n            data: newCategory,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let category;\r\n        if (categoryId) {\r\n            if (!isValidObjectId(categoryId)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid category Id\"});\r\n            }\r\n            category = await categoryModel.findById(categoryId);\r\n        };\r\n\r\n        if (!category) {\r\n            return res.status(200).send({ status: true, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let allFabrics = await fabricModel.find({ categoryId: category._id });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: category,\r\n            products: allFabrics,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET CATEGORY BY SERVICE SEARCH {allProductSearchByKeywords}\r\nconst getFabricByKeywords  = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n        let { search_data } = req.body;\r\n\r\n        if (categoryId) {\r\n            let fabrics = await fabricModel.find({ categoryId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: fabrics,\r\n            });\r\n        } else {\r\n            let filter = {\r\n                $or: [\r\n                    { name: { $regex: search_data, $options: \"i\" } },\r\n                    { fabric: { $regex: search_data, $options: \"i\" } },\r\n                    { color: { $regex: search_data, $options: \"i\" } },\r\n                    { pattern: { $regex: search_data, $options: \"i\" } },\r\n                    { borderType: { $regex: search_data, $options: \"i\" } },\r\n                    { description: { $regex: search_data, $options: \"i\" } },\r\n                    { brand: { $regex: search_data, $options: \"i\" } },\r\n                    { moreDetails: { $regex: search_data, $options: \"i\" } },\r\n                ],\r\n            };\r\n    \r\n            let fabrics = await fabricModel.find(filter);\r\n    \r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: fabrics,\r\n            });\r\n        }\r\n        \r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n    try {\r\n        let allCategories = await categoryModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCategories,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategory = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"Category Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Category Id\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            category.name = reqBody.name;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            category.description = reqBody.description;\r\n        };\r\n\r\n        if (\"category_image\" in reqBody || (req.files && req.files.category_image)) {\r\n            let category_image = req.files.category_image;\r\n            if (!category_image) {\r\n                return res.status(400).send({ status: false, message: \"No category images uploaded\" });\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/categoryImages/\";\r\n            let imgUniqName = uuid.v4() + \".\" + category_image.name.split(\".\").pop();\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(catImgFolder, imgUniqName);\r\n\r\n            let oldImgName = category.category_image.imageName;\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(catImgFolder, oldImgName);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                };\r\n            };\r\n            \r\n            await category_image.mv(imgSavingPath);\r\n\r\n            let newImgObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            category.category_image = newImgObj;\r\n        };\r\n\r\n        await category.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category updated successfully\",\r\n            data: category,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE CATEGORY\r\nconst deleteCategory = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"CategoryId is required\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"No category found with this category Id\"})\r\n        };\r\n\r\n        let oldImgName = category.category_image.fileName;\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(catImgFolder, oldImgName);\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n        };\r\n\r\n        await categoryModel.deleteOne({ _id: categoryId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    getCategoryById,\r\n    getFabricByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n","const checkoutModel = require(\"../models/checkoutModel\");\r\nconst userModel = require(\"../models/userModel\");\r\n\r\n// CREATE CHECKOUT\r\nconst createCheckout = async (req, res) => {\r\n    try {\r\n        let {\r\n            customerId,\r\n            f_name,\r\n            l_name,\r\n            email,\r\n            mobile,\r\n            address,\r\n            apartment,\r\n            city,\r\n            countryCode,\r\n            post_code,\r\n            state,\r\n            state_code,\r\n            countryName,\r\n            productList,\r\n            totalProduct,\r\n            CGST,\r\n            SGST,\r\n            paymentType,\r\n            tax,\r\n            total,\r\n            grandTotal,\r\n        } = req.body;\r\n\r\n        let products = [];\r\n\r\n        for (let productData of productList) {\r\n            let { name, fabric, color, pattern, borderType, price, size, occasion, brand, description, categoryName, categoryId, fabricImages, moreDetails } = productData;\r\n\r\n            products.push({\r\n                name,\r\n                fabric,\r\n                color,\r\n                pattern,\r\n                borderType,\r\n                price,\r\n                size,\r\n                occasion,\r\n                brand,\r\n                description,\r\n                categoryName,\r\n                categoryId,\r\n                fabricImages,\r\n                moreDetails,\r\n            });\r\n        }\r\n\r\n        let checkoutData = {\r\n            customerId,\r\n            f_name,\r\n            l_name,\r\n            email,\r\n            mobile,\r\n            address,\r\n            apartment,\r\n            city,\r\n            countryCode,\r\n            post_code,\r\n            state,\r\n            state_code,\r\n            countryName,\r\n            productList,\r\n            totalProduct,\r\n            CGST,\r\n            SGST,\r\n            paymentType,\r\n            tax,\r\n            total,\r\n            grandTotal,\r\n        };\r\n\r\n        let newBooking = await checkoutModel.create(checkoutData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"checkout successfully\",\r\n            data: newBooking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF A USER BY USER ID\r\nconst getUserAllBookings = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\" });\r\n        }\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n        }\r\n\r\n        let allBookingsOfAUser = await checkoutModel.find({ userId: user.userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allBookingsOfAUser,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nconst cancelOrderById = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n\r\n        if (!orderId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'OrderId is required'\r\n            });\r\n        };\r\n\r\n        let data = req.body;\r\n\r\n        let { status, question, feedback } = data;\r\n\r\n        let order = await checkoutModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({ status: false, message: \"Order not found\" });\r\n        }\r\n\r\n        if (order.status === \"Cancelled\") {\r\n            return res.status(400).send({ status: false, message: \"This order is already cancelled\" });\r\n        }\r\n\r\n        if (order.status === \"Rejected\") {\r\n            return res.status(400).send({ status: false, message: \"This order is already Rejected\" });\r\n        }\r\n\r\n        let statusArr = [\"Cancelled\", \"Rejected\"];\r\n\r\n        if (!statusArr.includes(status)) {\r\n            return res.status(400).send({ status: false, message: \"Order status can be only 'Cancelled' or 'Rejected'\" });\r\n        }\r\n\r\n        let orderStatus = await checkoutModel.findOneAndUpdate(\r\n            { _id: orderId }, \r\n            { $set: { status: status, question: question, feedback: feedback } }, \r\n            { new: true }\r\n        );\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order cancelled successfully\",\r\n            orderStatus: orderStatus,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL ORDERS\r\nconst getAllOrders = async (req, res) => {\r\n    try {\r\n        let allOrders = await checkoutModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order cancelled successfully\",\r\n            orderStatus: allOrders,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    createCheckout,\r\n    getUserAllBookings,\r\n    cancelOrderById,\r\n    getAllOrders\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nconst bannerImageModel = require(\"../models/bannerImageModel\");\r\nconst enquiryModel = require('../models/enquiryModel');\r\nconst { getCurrentIPAddress } = require(\"../uitls/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst fabricModel = require(\"../models/fabricModel\");\r\nconst userModel = require(\"../models/userModel\");\r\nconst checkoutModel = require('../models/checkoutModel');\r\n\r\nlet bannerFolder = path.join(__dirname, \"..\", \"..\", \"bannerImages\");\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        let categories = await categoryModel.find({});\r\n\r\n        let bannerObj = await bannerImageModel.findOne();\r\n\r\n        let bannerImages = bannerObj.bannerImages;\r\n\r\n        let myAllOrders = null;\r\n        if (userId) {\r\n            myAllOrders = await checkoutModel.find({ customerId: userId }); \r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            categoryList: categories,\r\n            bannerImages: bannerImages,\r\n            myAllOrders,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ADMIN DASHBOARD\r\nconst getAdminDashboard = async (req, res) => {\r\n    try {\r\n        let categories = await categoryModel.find({});\r\n        let bannerObj = await bannerImageModel.findOne();\r\n        let bannerImages = bannerObj.bannerImages;\r\n        let allOrders = await checkoutModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            categoryList: categories,\r\n            bannerImages: bannerImages,\r\n            allOrders\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        if (!bannerObj) {\r\n            bannerObj = await bannerImageModel.create({bannerImages: []});\r\n        }\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        if (!fs.existsSync(bannerFolder)) {\r\n            fs.mkdirSync(bannerFolder);\r\n        };\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bannerImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(bannerFolder, imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = bannerObj.bannerImages[index].imageName;\r\n            if (oldImage) {\r\n                let oldImgPath = path.join(bannerFolder, oldImage);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n            \r\n            await bannerImage.mv(imgSavingPath);\r\n\r\n            let updatedBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages[index] = updatedBannerObj;\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                data: bannerImages,\r\n            });\r\n        } else {\r\n            await bannerImage.mv(imgSavingPath);\r\n\r\n            let newBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages.push(newBannerObj);\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                data: bannerImages,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { imageId, key } = req.params;\r\n        if (!imageId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne();\r\n\r\n        if (!bannerObj) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (bannerObj.bannerImages.length) {\r\n            for (let i = 0; i < bannerObj.bannerImages.length; i++) {\r\n                if (imageId === bannerObj.bannerImages[i]._id.toString()) {\r\n\r\n                    let imgName = bannerObj.bannerImages[i].imageName;\r\n                    if (imgName) {\r\n                        let imgPath = path.join(bannerFolder, imgName);\r\n                        if (fs.existsSync(imgPath)) {\r\n                            fs.unlinkSync(imgPath);\r\n                        };\r\n                    }\r\n                    \r\n                    let arr = bannerObj.bannerImages;\r\n                    arr.splice(i, 1);\r\n                    bannerObj.bannerImages = arr;\r\n                    await bannerObj.save();\r\n                };\r\n            };\r\n        };\r\n\r\n        let bannerImages = bannerObj.bannerImages;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            data: bannerImages,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    getDashboard,\r\n    getAdminDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n};\r\n","const userModel = require('../models/userModel');\r\nconst enquiryModel = require('../models/enquiryModel');\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\nconst fabricModel = require('../models/fabricModel');\r\n\r\n\r\n// SUBMIT ENQUIRY\r\nconst submitEnquiry = async (req, res) => {\r\n    try {\r\n        let { userId, fabircId, questions, enquiryData } = req.body;\r\n\r\n        let enquiryId;\r\n        let isEnquiryAlreadyExist;\r\n\r\n        do {\r\n            enquiryId = Math.floor(1000000000 + Math.random() * 8999999999);\r\n            isEnquiryAlreadyExist = await enquiryModel.findOne({ enquiryId });\r\n        } while (isEnquiryAlreadyExist);\r\n\r\n        let enquiryObj = {\r\n            enquiryId,\r\n            userId,\r\n            fabircId,\r\n            questions,\r\n            enquiryData\r\n        }\r\n\r\n        let newEnquiry = await enquiryModel.create(enquiryObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: newEnquiry\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL ENQUIRIES\r\nconst getAllEnquiries = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"Not Authorized\"});\r\n        }\r\n\r\n        let enquiries = await enquiryModel.find({});\r\n\r\n        let enqArr = [];\r\n        if (enquiries.length) {\r\n            for (let enquiry of enquiries) {\r\n                let fabric = await fabricModel.findOne({  _id: enquiry.fabricId.toString() });\r\n                let user = await userModel.findOne({ userId: enquiry.userId });\r\n\r\n                let enqObj = {\r\n                    enquiry: enquiry,\r\n                    fabric: fabric,\r\n                    user: user\r\n                };\r\n\r\n                enqArr.push(enqObj);\r\n            }\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: enqArr,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE ENQUIRY\r\nconst deleteEnquiry = async (req, res) => {\r\n    try {\r\n        let { enquiryId } = req.params;\r\n\r\n        if (!enquiryId) {\r\n            return res.status(400).send({ status: false, message: \"Enquiry Id is required\"});\r\n        };\r\n\r\n        let deletedEnquiry = await enquiryModel.deleteOne({ _id: enquiryId });\r\n\r\n        if (!deletedEnquiry) {\r\n            return res.status(400).send({ status: false, message: \"Enquiry not found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Enquiry deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    submitEnquiry,\r\n    getAllEnquiries,\r\n    deleteEnquiry\r\n};\r\n","const fabricModel = require('../models/fabricModel');\r\n\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nlet fabricImgFolder = path.join(__dirname, \"..\", \"..\", \"fabricImages\");\r\n\r\n\r\n// ADD FABRIC\r\nconst addFabric = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let {\r\n            name,\r\n            fabric,\r\n            color,\r\n            pattern,\r\n            borderType,\r\n            price,\r\n            size,\r\n            occasion,\r\n            brand,\r\n            description,\r\n            categoryName,\r\n            categoryId,\r\n            moreDetails\r\n        } = req.body;\r\n\r\n        let fabData = {\r\n            name,\r\n            fabric,\r\n            color,\r\n            pattern,\r\n            borderType,\r\n            price,\r\n            size,\r\n            occasion,\r\n            brand,\r\n            description,\r\n            categoryName,\r\n            categoryId,\r\n            moreDetails\r\n        };\r\n\r\n        let newFabric = await fabricModel.create(fabData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Fabric Added Successfully\",\r\n            property: newFabric,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE BANNER IMAGES\r\nconst addUpdateFabricImages = async (req, res) => {\r\n    try {\r\n        let { fabricId } = req.params;\r\n        if (!fabricId) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (!isValidObjectId(fabricId)) {\r\n            return res.status(403).send({ status: false, message: \"Invalid fabricId!!!\" });\r\n        };\r\n\r\n        let fabric = await fabricModel.findById(fabricId);\r\n\r\n        if (!fabric) {\r\n            return res.status(400).send({ status: false, message: \"fabric not found\" });\r\n        }\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let itemImage = req.files.itemImage;\r\n\r\n        if (!itemImage) {\r\n            return res.status(400).send({ status: false, message: \"No property image uploaded\" });\r\n        };\r\n\r\n        if (!fs.existsSync(fabricImgFolder)) {\r\n            fs.mkdirSync(fabricImgFolder);\r\n        };\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/fabricImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + itemImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(fabricImgFolder, imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = fabric.fabricImages[index].fileName;\r\n            if (oldImage) {\r\n                let oldImgPath = path.join(fabricImgFolder, oldImage);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            await itemImage.mv(imgSavingPath);\r\n\r\n            let updatedBannerObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            fabric.fabricImages[index] = updatedBannerObj;\r\n\r\n            await fabric.save();\r\n\r\n            let fabricImages = fabric.fabricImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Fabric image updated successfully\",\r\n                data: fabricImages,\r\n            });\r\n        } else {\r\n            await itemImage.mv(imgSavingPath);\r\n\r\n            let newBannerObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            fabric.fabricImages.push(newBannerObj);\r\n\r\n            await fabric.save();\r\n\r\n            let fabricImages = fabric.fabricImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Fabric image added successfully\",\r\n                data: fabricImages,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE PROPERTY IMAGE BY ID\r\nconst deleteFabricImage = async (req, res) => {\r\n    try {\r\n        let { fabricId, imageId } = req.params;\r\n        if (!imageId || !fabricId) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let fabric = await fabricModel.findById(fabricId);\r\n\r\n        if (!fabric) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        // let updatedImages = fabric.fabricImages.filter((image) => image._id.toString() !== imageId);\r\n\r\n        // if (updatedImages.length === property.property_images.length) {\r\n        //     return res.status(400).send({ status: false, message: \"Image not found\" });\r\n        // }\r\n\r\n        // property.property_images = updatedImages;\r\n\r\n        for (let img of fabric.fabricImages) {\r\n            if ( imageId === img._id.toString() ) {\r\n                let oldImage = img.fileName;\r\n                if (oldImage) {\r\n                    let oldImgPath = path.join(fabricImgFolder, oldImage);\r\n                    if (fs.existsSync(oldImgPath)) {\r\n                        fs.unlinkSync(oldImgPath);\r\n                    }\r\n                };\r\n\r\n                let arr = fabric.fabricImages;\r\n                let idx = arr.indexOf(img);\r\n                arr.splice(idx, 1);\r\n                fabric.fabricImages = arr;\r\n                await fabric.save();\r\n            }\r\n        };\r\n\r\n        let fabricImages = fabric.fabricImages;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"fabric image deleted successfully\",\r\n            data: fabricImages,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL FABRIC LIST\r\nconst getAllFabricList = async (req, res) => {\r\n    try {\r\n        // let { key } = req.params;\r\n\r\n        // if (!key) {\r\n        //     return res.status(400).send({ status: false, message: \"Key is required\" });\r\n        // }\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        // }\r\n\r\n        let fabrics = await fabricModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: fabrics,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE FABRIC\r\nconst updateFabric = async (req, res) => {\r\n    try {\r\n        let { fabricId } = req.params;\r\n        if (!fabricId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'fabricId is required'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(fabricId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Invalid fabricId'\r\n            });\r\n        };\r\n\r\n        let f = await fabricModel.findById(fabricId);\r\n\r\n        if (!f) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'fabric not found'\r\n            });\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"name\" in e) {\r\n            f.name = e.name;\r\n        };\r\n\r\n        if (\"fabric\" in e) {\r\n            f.fabric = e.fabric;\r\n        };\r\n\r\n        if (\"color\" in e) {\r\n            f.color = e.color;\r\n        };\r\n\r\n        if (\"pattern\" in e) {\r\n            f.pattern = e.pattern;\r\n        };\r\n\r\n        if (\"borderType\" in e) {\r\n            f.borderType = e.borderType;\r\n        };\r\n\r\n        if (\"price\" in e) {\r\n            f.price = e.price;\r\n        };\r\n\r\n        if (\"size\" in e) {\r\n            f.size = e.size;\r\n        };\r\n\r\n        if (\"occasion\" in e) {\r\n            f.occasion = e.occasion;\r\n        };\r\n\r\n        if (\"brand\" in e) {\r\n            f.brand = e.brand;\r\n        };\r\n\r\n        if (\"description\" in e) {\r\n            f.description = e.description;\r\n        };\r\n\r\n        if (\"categoryName\" in e) {\r\n            f.categoryName = e.categoryName;\r\n        };\r\n\r\n        if (\"categoryId\" in e) {\r\n            f.categoryId = e.categoryId;\r\n        };\r\n\r\n        if (\"moreDetails\" in e) {\r\n            f.moreDetails = e.moreDetails;\r\n        };\r\n\r\n        await f.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"fabric Updated Successfully\",\r\n            property: f,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE FABRIC\r\nconst deleteFabric = async (req, res) => {\r\n    try {\r\n        let { fabricId } = req.params;\r\n        if (!fabricId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'fabricId is required'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(fabricId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Invalid fabricId'\r\n            });\r\n        };\r\n\r\n        let f = await fabricModel.findById(fabricId);\r\n\r\n        if (!f) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'fabric not found'\r\n            });\r\n        };\r\n\r\n        for (let img of f.fabricImages) {\r\n            let oldImg = img.fileName;\r\n            if (oldImg) {\r\n                let oldImgPath = path.join(fabricImgFolder, oldImg);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                };\r\n            };\r\n        };\r\n\r\n        await fabricModel.findOneAndDelete({ _id: fabricId });\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"fabric deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addFabric,\r\n    addUpdateFabricImages,\r\n    deleteFabricImage,\r\n    getAllFabricList,\r\n    updateFabric,\r\n    deleteFabric\r\n};","const userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst deletedUserModel = require('../models/deleteUserModel');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// AUTHENTICATE USER\r\nconst authenticateUser = async (req, res) => {\r\n    try {\r\n        let { email, phone, profilePic, name, userId } = req.body;\r\n\r\n        const isUserExists = await userModel.findOne({ userId: userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                name,\r\n                email,\r\n                phone,\r\n                profilePic\r\n            };\r\n\r\n            let newUser = await userModel.create(userObj);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        };\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER USER\r\nconst updateUser = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            user.name = reqBody.name;\r\n        };\r\n\r\n        if (\"phone\" in reqBody) {\r\n            user.phone = reqBody.phone;\r\n        };\r\n\r\n        if (\"gender\" in reqBody) {\r\n            user.gender = reqBody.gender;\r\n        };\r\n\r\n        if (\"date_of_birth\" in reqBody) {\r\n            user.date_of_birth = reqBody.date_of_birth;\r\n        };\r\n\r\n        if (\"Address\" in reqBody) {\r\n            if (\"address\" in reqBody.Address) {\r\n                user.Address.address = reqBody.Address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.Address) {\r\n                user.Address.apartment = reqBody.Address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.Address) {\r\n                user.Address.city = reqBody.Address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.Address) {\r\n                user.Address.post_code = reqBody.Address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.Address) {\r\n                user.Address.state = reqBody.Address.state;\r\n            }\r\n        };\r\n\r\n        await user.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User updated successfully\",\r\n            data: user,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET USER BY ID\r\nconst getUserById = async (req, res) => {\r\n    try {\r\n        let { userId, key } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: user\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL USERS\r\nconst getAllUsers = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let users = await userModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: users\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        const { reason, feedback} = req.body;\r\n\r\n        let userAllBookings = await bookingModel.find({ userId });\r\n\r\n        let userData = {\r\n            user,\r\n            userAllBookings\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(userData);\r\n\r\n        await userModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedUserData: jsonStr,\r\n            reason: reason? reason: \"\",\r\n            feedback: feedback? feedback: \"\",\r\n            deletedAt: new Date().toLocaleString()\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        console.log(\"Error deleting user\", error.message);\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    authenticateUser,\r\n    updateUser,\r\n    deleteUser,\r\n    getUserById,\r\n    getAllUsers\r\n};\r\n","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nmodule.exports = BaseError;","const { isValidObjectId } = require('mongoose');\r\nconst { tokenSecretKey } = require('../config/config');\r\nconst adminModel = require('../models/adminModel');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers[\"authorization\"];\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Token is required\"\r\n            });\r\n        };\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid token\"\r\n            });\r\n        };\r\n\r\n        let decodedToken;\r\n\r\n        jwt.verify(token, tokenSecretKey, (err, decode) => {\r\n            if (err) {\r\n                throw err;\r\n            };\r\n\r\n            decodedToken = decode;\r\n            let loginUserId = decodedToken.adminId;\r\n            req[\"adminId\"] = loginUserId;\r\n            next();\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.adminId;\r\n        let { adminId } = req.params;\r\n\r\n        if (!isValidObjectId(adminId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid userId\"})\r\n        };\r\n\r\n        let admin = await adminModel.findById(adminId);\r\n\r\n        if (!admin){\r\n            return res.status(404).send({ status: false, message: \"Admin not found\"})\r\n        };\r\n\r\n        let AdminId = admin._id;\r\n\r\n        if ( tokenId.toString() !== AdminId.toString() ) {\r\n            return res.status(403).send({\r\n                status: false,\r\n                message: \"NOT AUTHORIZED!!!\"\r\n            })\r\n        };\r\n\r\n        next();\r\n    } catch (error) {   \r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = { Authentication, Authorization }","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst adminSchema = new mongoose.Schema({\r\n    adminId: {\r\n        type: String,\r\n    },\r\n\r\n    sessionToken: {\r\n        type: String,\r\n    },\r\n\r\n    name: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        picName: {\r\n            type: String,\r\n        },\r\n        picPath: {\r\n            type: String,\r\n        }\r\n    },\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);","const mongoose = require('mongoose');\r\n\r\nconst bannerImageSchema = new mongoose.Schema({\r\n    bannerImages: [\r\n        {\r\n            imageName: { type: String, default: \"\" },\r\n            imagePath: { type: String, default: \"\" }\r\n        }\r\n    ]\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"BannerImage\", bannerImageSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    category_image: {\r\n        fileName: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        filePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    cat_enum: {\r\n        type: String,\r\n        enum: [\"\", \"\"]\r\n    },\r\n    \r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);","const mongoose = require(\"mongoose\");\r\n\r\nconst checkoutSchema = new mongoose.Schema(\r\n    {\r\n        customerId: { type: String },\r\n        f_name: { type: String },\r\n        l_name: { type: String },\r\n        email: { type: String },\r\n        mobile: { type: String },\r\n        address: { type: String },\r\n        apartment: { type: String },\r\n        city: { type: String },\r\n        post_code: { type: String },\r\n        state: { type: String },\r\n        state_code: { type: String },\r\n        countryName: { type: String },\r\n        countryCode: { type: String },\r\n        productList: [\r\n            {\r\n                name: { type: String },\r\n                fabric: { type: String },\r\n                color: { type: String },\r\n                pattern: { type: String },\r\n                borderType: { type: String },\r\n                price: { type: Number },\r\n                size: { type: String },\r\n                occasion: { type: String },\r\n                brand: { type: String },\r\n                description: { type: String },\r\n                categoryName: { type: String },\r\n                categoryId: { type: String },\r\n                fabricImages: [\r\n                    {\r\n                        fileName: { type: String },\r\n                        filePath: { type: String },\r\n                    },\r\n                ],\r\n                moreDetails: [\r\n                    {\r\n                        type: mongoose.Schema.Types.Mixed,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        totalProduct: { type: Number },\r\n        CGST: { type: Number },\r\n        SGST: { type: Number },\r\n        paymentType: { type: String },\r\n        tax: { type: Number },\r\n        total: { type: Number },\r\n        grandTotal: { type: Number },\r\n        status: {\r\n            type: String,\r\n            enum: [\"Pending\", \"Approved\", \"Rejected\", \"Shipped\", \"Completed\", \"Cancelled\"],\r\n            default: \"Pending\"\r\n        },\r\n        question: { type: String },\r\n        feedback: { type: String }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Checkout\", checkoutSchema);\r\n","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedUserSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedUserData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedUser\", deletedUserSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst enquirySchema = new mongoose.Schema({\r\n\r\n    enquiryId: {\r\n        type: String,\r\n    },\r\n    \r\n    userId: { \r\n        type: String, \r\n        default: \"\" \r\n    },\r\n\r\n    fabricId: { \r\n        type: ObjectId,\r\n        ref: \"Fabric\"\r\n    },\r\n\r\n    questions: [ String ],\r\n\r\n    enquiryData: {\r\n        type: String,\r\n    }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Enquiry\", enquirySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst fabricSchema = new mongoose.Schema({\r\n    name: { type: String },\r\n    fabric: { type: String },\r\n    color: { type: String },\r\n    pattern: { type: String },\r\n    borderType: { type: String },\r\n    price: { type: Number },\r\n    size: { type: String },\r\n    occasion: { type: String },\r\n    brand: { type: String },\r\n    description: { type: String },\r\n    categoryName: { type: String },\r\n    categoryId: { type: String },\r\n    fabricImages: [\r\n        {\r\n            fileName: { type: String },\r\n            filePath: { type: String },\r\n        }\r\n    ],\r\n    moreDetails: [\r\n        {\r\n            type: mongoose.Schema.Types.Mixed,\r\n        }\r\n    ]\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Fabric\", fabricSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        userId: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n            default: \"\"\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        profilePic: {\r\n            type: String,\r\n        },\r\n\r\n        gender: {\r\n            type: String,\r\n            enum: [\"MALE\", \"FEMALE\", \"OTHER\", \"UNDEFINED\"],\r\n            default: \"UNDEFINED\",\r\n        },\r\n\r\n        Address: {\r\n            address: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            apartment: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            city: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            post_code: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            state: {\r\n                type: String,\r\n                default: \"\"\r\n            }\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        phone: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        date_of_birth: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin, \r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\nconst { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\nrouter.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCategory,\r\n    getCategoryById,\r\n    getFabricByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n } = require('../../controllers/categoryController');\r\n\r\n// ADD CATEGORY\r\nrouter.post(\"/api/v1/addCategory\", addCategory);\r\n\r\n// GET CATEGORY BY ID\r\nrouter.post(\"/api/v1/viewService/:categoryId\", getCategoryById);\r\n\r\n// SEARCH PRODUCTS BY KEYWORDS\r\nrouter.post(\"/api/v1/allSareeSearchByKeywords/:categoryId?\", getFabricByKeywords);\r\n\r\n// GET ALL CATEGORIES\r\nrouter.get(\"/api/v1/getAllCategories\", getAllCategories);\r\n\r\n// UPDATE CATEGORY\r\nrouter.put(\"/api/v1/updateCategory/:categoryId\", updateCategory);\r\n\r\n// DELETE CATEGORY\r\nrouter.delete(\"/api/v1/deleteCategory/:categoryId\", deleteCategory);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createCheckout,\r\n    getUserAllBookings,\r\n    cancelOrderById,\r\n    getAllOrders,\r\n} = require('../../controllers/checkoutController');\r\n\r\n// CREATE CHECKOUT\r\nrouter.post(\"/api/v1/createCheckout\", createCheckout);\r\n\r\n// GET ALL ORDERS OF A USER\r\nrouter.get(\"/api/v1/getAllOrdersOfAUser/:userId\", getUserAllBookings);\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nrouter.put(\"/api/v1/cancelOrder/:orderId\", cancelOrderById);\r\n\r\n// GET ALL ORDERS\r\nrouter.get(\"/api/v1/getAllorders\", getAllOrders);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    getDashboard, \r\n    updateBannerImages, \r\n    deleteBannerImage, \r\n    getAdminDashboard \r\n} = require('../../controllers/dashboard');\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:userId?\", getDashboard);\r\n\r\n\r\n// GET ADMIN DASHBOARD\r\nrouter.get(\"/api/v1/getAdminDashboard\", getAdminDashboard);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:key\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:key\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { submitEnquiry, deleteEnquiry, getAllEnquiries } = require('../../controllers/enquiryController');\r\n\r\n// SUBMIT ENQUIRY\r\nrouter.post(\"/api/v1/submitEnquiry\", submitEnquiry);\r\n\r\n// GET ALL ENQUIRIES\r\nrouter.get(\"/api/v1/getAllEnquiries/:key\", getAllEnquiries);\r\n\r\n// DELETE ENQUIRY\r\nrouter.delete(\"/api/v1/deleteEnquiry/:enquiryId\", deleteEnquiry);\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addFabric, \r\n    addUpdateFabricImages,\r\n    deleteFabricImage,\r\n    getAllFabricList,\r\n    updateFabric,\r\n    deleteFabric\r\n} = require('../../controllers/fabricController');\r\n\r\n// GET DASHBOARD\r\nrouter.post(\"/api/v1/addFabric/:key\", addFabric);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.post(\"/api/v1/addOrUpdateFabricImages/:fabricId\", addUpdateFabricImages);\r\n\r\n// DELETE FABRIC IMAGES\r\nrouter.delete(\"/api/v1/deleteFabricImage/:fabricId/:imageId\", deleteFabricImage);\r\n\r\n// GET ALL FABRIC LIST\r\nrouter.get(\"/api/v1/getAllFabricList\", getAllFabricList);\r\n\r\n// UPDATE FABRIC\r\nrouter.put(\"/api/v1/updateFabric/:fabricId\", updateFabric);\r\n\r\n// DELETE FABRIC\r\nrouter.delete(\"/api/v1/deleteFabric/:fabricId\", deleteFabric);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateUser,\r\n    updateUser,\r\n    getAllUsers,\r\n    getUserById,\r\n    deleteUser,\r\n} = require('../../controllers/userController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateUser\", authenticateUser);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/getUser/:userId/:key\", getUserById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/users/:key\", getAllUsers);\r\n\r\n// REGISTER USER / UPDATE USER\r\nrouter.post(\"/api/v1/updateUser/:userId\", updateUser);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteUser/:userId\", deleteUser);\r\n\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/base.error');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = { errorHandler };","const os = require(\"os\");\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\nmodule.exports = {\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require(\"cors\");\r\nconst { port } = require('./src/config/config');\r\nconst { connectToDB } = require('./src/config/db.config');\r\nconst { errorHandler } = require('./src/uitls/errorHandler');\r\n\r\nconst app = express();\r\n\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.use(bodyParser.text({ limit: \"50mb\" }));\r\n\r\napp.use(fileUpload());\r\napp.use(cors());\r\n\r\nconst adminRoutes = require('./src/routes/v1/adminRoutes');\r\nconst checkoutRoutes = require('./src/routes/v1/checkoutRoutes');\r\nconst userRoutes = require('./src/routes/v1/userRoutes');\r\nconst fabricRoutes = require('./src/routes/v1/fabricRoutes');\r\nconst categoryRoutes = require('./src/routes/v1/categoryRoutes');\r\nconst dashboardRoutes = require('./src/routes/v1/dashboardRoutes');\r\nconst enquiryRoutes = require('./src/routes/v1/enquiryRoutes');\r\n\r\napp.use(\"/userImages\", express.static(__dirname + \"/userImages\"));\r\napp.use(\"/fabricImages\", express.static(__dirname + \"/fabricImages\"));\r\napp.use(\"/categoryImages\", express.static(__dirname + \"/categoryImages\"));\r\napp.use(\"/icons\", express.static(__dirname + \"/icons\"));\r\napp.use(\"/bannerImages\", express.static(__dirname + \"/bannerImages\"));\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", userRoutes);\r\napp.use(\"/\", fabricRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", enquiryRoutes);\r\napp.use(\"/\", checkoutRoutes);\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>Fabric App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\napp.listen(port, async() => {\r\n    console.log(\"Server is running on port\", port);\r\n\r\n    await connectToDB();\r\n    console.log(\"Database connected\");\r\n});\r\n\r\n"],"names":["config","module","exports","mongoDbUrl","process","env","MONGO_DB_URL","logDbUrl","LOG_DB_URL","tokenSecretKey","JWT_SECRET","port","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoose","connectToDB","connect","error","console","log","adminModel","jwt","bcrypt","uuid","path","getCurrentIPAddress","generateRandomAlphaNumericID","userModel","createAdmin","async","req","res","name","email","password","mobile","body","status","send","message","profilePic","files","hash","currentIpAddress","profilePicPath","profilePicName","v4","split","pop","profilePicFullPath","picSavingPath","join","__dirname","mv","err","picObj","picName","picPath","adminObj","adminId","sessionToken","newAdmin","create","data","adminLogin","admin","findOne","compare","result","date","Date","now","issueTime","Math","floor","token","sign","_id","toString","iat","expiresIn","setHeader","save","hasAccess","getAllBookingsOfUser","userId","params","userAllBookings","bookingModel","find","getOneDayBookings","today","year","getFullYear","String","getMonth","padStart","getDate","oneDayBookings","BookingDate","grandTotal","booking","grand_total","totalBookings","oneDayRevenue","getOneWeekBookings","startDate","endDate","oneWeekAgo","getTime","startYear","oneWeekBookings","$gte","$lte","length","getOneMonthBookings","month","oneMonthBookings","createdAt","oneMonthRevenue","getOneYearBookings","oneYearBookings","oneYearRequests","oneYearRevenue","categoryModel","fs","fabricModel","isValidObjectId","catImgFolder","addCategory","description","category_image","existsSync","mkdirSync","imgRelativePath","imgUniqName","imgFullUrl","imgSavingPath","categoryObj","fileName","filePath","newCategory","getCategoryById","category","categoryId","findById","allFabrics","products","getFabricByKeywords","search_data","fabrics","filter","$or","$regex","$options","fabric","color","pattern","borderType","brand","moreDetails","getAllCategories","allCategories","updateCategory","reqBody","oldImgName","imageName","oldImgPath","unlinkSync","newImgObj","imagePath","deleteCategory","deleteOne","checkoutModel","createCheckout","customerId","f_name","l_name","address","apartment","city","countryCode","post_code","state","state_code","countryName","productList","totalProduct","CGST","SGST","paymentType","tax","total","productData","price","size","occasion","categoryName","fabricImages","push","checkoutData","newBooking","getUserAllBookings","user","allBookingsOfAUser","cancelOrderById","orderId","question","feedback","order","includes","orderStatus","findOneAndUpdate","$set","new","getAllOrders","allOrders","bannerImageModel","bannerFolder","getDashboard","categories","bannerImages","myAllOrders","categoryList","getAdminDashboard","updateBannerImages","key","bannerObj","ImageModel","parsedData","JSON","parse","bannerImage","index","isNewPick","img_id","newBannerObj","oldImage","updatedBannerObj","deleteBannerImage","imageId","i","imgName","imgPath","arr","splice","enquiryModel","submitEnquiry","enquiryId","isEnquiryAlreadyExist","fabircId","questions","enquiryData","random","enquiryObj","newEnquiry","getAllEnquiries","enquiries","enqArr","enquiry","fabricId","enqObj","deleteEnquiry","fabricImgFolder","addFabric","fabData","newFabric","property","addUpdateFabricImages","itemImage","deleteFabricImage","img","idx","indexOf","getAllFabricList","updateFabric","f","e","deleteFabric","oldImg","findOneAndDelete","deletedUserModel","authenticateUser","phone","isUserExists","userObj","newUser","updateUser","gender","date_of_birth","Address","deleteUser","reason","userData","jsonStr","stringify","deletedUserData","deletedAt","toLocaleString","getUserById","getAllUsers","users","BaseError","Error","constructor","statusCode","details","super","this","Authentication","next","tokenWithBearer","headers","decodedToken","verify","decode","loginUserId","Authorization","tokenId","AdminId","adminSchema","Schema","Types","ObjectId","type","timestamps","model","bannerImageSchema","default","categorySchema","cat_enum","enum","checkoutSchema","Number","Mixed","deletedUserSchema","enquirySchema","ref","fabricSchema","userSchema","unique","trim","required","router","Router","post","get","put","delete","StatusCodes","errorHandler","json","success","INTERNAL_SERVER_ERROR","os","networkInterfaces","Object","values","flat","iface","family","internal","map","id","characters","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","app","use","limit","urlencoded","extended","text","adminRoutes","checkoutRoutes","userRoutes","fabricRoutes","categoryRoutes","dashboardRoutes","enquiryRoutes","static","listen"],"sourceRoot":""}